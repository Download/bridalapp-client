{"version":3,"file":"bridalapp.min.js","sources":["bridalapp/class.js","bridalapp/log.js","bridalapp/datastore.js","bridalapp/synchabledatastore.js","bridalapp/persistent.js","bridalapp/localdatastore.js","bridalapp/restdatastore.js","bridalapp/named.js","bridalapp/account.js","bridalapp/brand.js","bridalapp/synchrequest.js","bridalapp/synchresponse.js","bridalapp/syncheddatastore.js","bridalapp/brands.js","bridalapp/category.js","bridalapp/country.js","bridalapp/countries.js","bridalapp/credential.js","bridalapp/group.js","bridalapp/password-credential.js","bridalapp/product.js","bridalapp/products.js","bridalapp/rating.js","bridalapp/ratings.js","bridalapp/role.js","bridalapp/stockitem.js","bridalapp/stock.js","bridalapp/store.js","bridalapp/stores.js","bridalapp.js"],"names":["define","Class","name","parent","args","arrayify","arguments","String","shift","classname","eval","klass","superclass","subclasses","subclass","prototype","push","i","len","length","addMethods","initialize","constructor","argumentNames","fn","names","toString","match","split","replace","it","Object","toArray","results","Array","bind","func","undefined","obj","splice","apply","concat","wrap","wrapper","this","src","keys","key","ancestor","props","val","argNames","method","m","valueOf","sub","subsub","log","out","METHODS","console","error","con","nul","level","lvl","logLevel","DEBUG","INFO","WARN","ERROR","NONE","DataStore","url","cfg","listeners","throttle","on","event","listener","trigger","me","triggered","Date","now","timeout","clearTimeout","setTimeout","call","off","load","Promise","resolve","count","save","item","delete","typeFactories","registerType","type","factory","fromType","fromUrl","idx","indexOf","s","substring","Suid","SynchableDataStore","$super","get","criteria","pageSize","pageIndex","clone","items","Persistent","page","matches","looksSynched","lastSynched","getTime","createdItems","updatedItems","deletedItems","synch","isSynching","newDate","staleItems","failedItems","futureItems","set","del","id","version","addProp","value","def","equals","other","toStringProperties","revive","t","fromJSON","json","JSON","parse","persistent","arg","j","one","comparator","list","element","hasOwnProperty","isArray","pluck","attr","stringify","start","end","slice","Math","max","min","eachArg","MemoryStorage","LocalDataStore","local","store","repoIdx","storeIdx","lastIndexOf","repo","backup","db","deleted","updated","synching","future","removed","date","stale","failed","$","RestDataStoreFactory","RestDataStore","retryCount","retryWaitTime","supportsSynch","remoteRequest","reject","then","e","all","synchRequest","data","retries","info","parts","deletedIds","join","request","errorHandler","pre","ajax","contentType","processData","done","statusText","jqXHR","responseText","fail","textStatus","errorThrown","warn","status","retry","err","Error","after","retryAfter","getResponseHeader","tmp","parseInt","isNaN","errorhandler","hashIdx","hash","qsIdx","qs","encodeURIComponent","Named","Account","roles","groups","credentials","is","role","isAny","isAll","Brand","SynchRequest","unsynchedDuration","synchDuration","currentIds","currentVersions","SynchResponse","handleLoadedItems","old","changed","staleIdx","handleSavedItems","merged","handleDeletedItems","poorMansSynch","pollInterval","remoteDataStore","dirty","synchError","autoSynch","autoSynchActive","setInterval","synchInterval","SynchedDataStore","remoteSynch","localDataStore","urls","localParts","localType","localRepo","localStore","remoteParts","remoteType","remoteRepo","remoteStore","force","req","filter","response","Brands","Category","Country","code","Countries","c","countries","by","prop","caseSensitive","toLowerCase","mine","byCode","byName","Credential","Group","PasswordCredential","Product","Products","Rating","score","productId","Ratings","Role","GUEST","USER","STORE_USER","STORE_MANAGER","BRAND_USER","BRAND_MANAGER","BRAUTSCHLOSS_USER","BRAUTSCHLOSS_MANAGER","ADMINISTRATOR","StockItem","Stock","Store","getFullAddress","address1","address2","postalCode","city","state","countryCode","Stores","STATIC","APIKEY","globalize","global"],"mappings":"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KAAAuE,QA4PA,KAAA,GAAA0K,GA3PAC,IACA,KAAA,gBACA,KAAA,kBACA,KAAA,YACA,KAAA,YACA,KAAA,mBACA,KAAA,YACA,KAAA,WACA,KAAA,aACA,KAAA,eACA,KAAA,wBACA,KAAA,cACA,KAAA,YACA,KAAA,UACA,KAAA,cACA,KAAA,YACA,KAAA,eACA,KAAA,YACA,KAAA,YACA,KAAA,eACA,KAAA,aACA,KAAA,YACA,KAAA,YACA,KAAA,WACA,KAAA,UACA,KAAA,YACA,KAAA,WACA,KAAA,qCACA,KAAA,qCACA,KAAA,2BACA,KAAA,aACA,KAAA,kBACA,KAAA,WACA,KAAA,mCACA,KAAA,sBACA,KAAA,aACA,KAAA,iBACA,KAAA,YACA,KAAA,aACA,KAAA,aACA,KAAA,WACA,KAAA,eACA,KAAA,mBACA,KAAA,6BACA,KAAA,SACA,KAAA,UACA,KAAA,UACA,KAAA,qBACA,KAAA,4BACA,KAAA,aACA,KAAA,YACA,KAAA,UACA,KAAA,uCACA,KAAA,iBACA,KAAA,eACA,KAAA,kBACA,KAAA,YACA,KAAA,SACA,KAAA,YACA,KAAA,WACA,KAAA,mBACA,KAAA,YACA,KAAA,aACA,KAAA,aACA,KAAA,uBACA,KAAA,YACA,KAAA,UACA,KAAA,gBACA,KAAA,sBACA,KAAA,YACA,KAAA,YACA,KAAA,aACA,KAAA,gCACA,KAAA,kBACA,KAAA,SACA,KAAA,YACA,KAAA,WACA,KAAA,kBACA,KAAA,qBACA,KAAA,gCACA,KAAA,UACA,KAAA,WACA,KAAA,YACA,KAAA,YACA,KAAA,UACA,KAAA,cACA,KAAA,WACA,KAAA,cACA,KAAA,YACA,KAAA,eACA,KAAA,SACA,KAAA,cACA,KAAA,aACA,KAAA,WACA,KAAA,kBACA,KAAA,WACA,KAAA,UACA,KAAA,sCACA,KAAA,aACA,KAAA,aACA,KAAA,cACA,KAAA,YACA,KAAA,YACA,KAAA,UACA,KAAA,cACA,KAAA,+BACA,KAAA,SACA,KAAA,YACA,KAAA,gBACA,KAAA,WACA,KAAA,UACA,KAAA,YACA,KAAA,UACA,KAAA,WACA,KAAA,WACA,KAAA,eACA,KAAA,UACA,KAAA,aACA,KAAA,4CACA,KAAA,wBACA,KAAA,WACA,KAAA,eACA,KAAA,qCACA,KAAA,WACA,KAAA,YACA,KAAA,YACA,KAAA,YACA,KAAA,UACA,KAAA,kBACA,KAAA,cACA,KAAA,eACA,KAAA,UACA,KAAA,gDACA,KAAA,eACA,KAAA,WACA,KAAA,aACA,KAAA,aACA,KAAA,SACA,KAAA,UACA,KAAA,qBACA,KAAA,eACA,KAAA,eACA,KAAA,cACA,KAAA,YACA,KAAA,WACA,KAAA,qCACA,KAAA,0BACA,KAAA,WACA,KAAA,aACA,KAAA,eACA,KAAA,eACA,KAAA,YACA,KAAA,eACA,KAAA,YACA,KAAA,YACA,KAAA,UACA,KAAA,UACA,KAAA,gBACA,KAAA,kBACA,KAAA,gBACA,KAAA,cACA,KAAA,UACA,KAAA,YACA,KAAA,SACA,KAAA,mBACA,KAAA,6BACA,KAAA,WACA,KAAA,SACA,KAAA,aACA,KAAA,UACA,KAAA,wBACA,KAAA,WACA,KAAA,qBACA,KAAA,aACA,KAAA,SACA,KAAA,gBACA,KAAA,aACA,KAAA,WACA,KAAA,aACA,KAAA,gBACA,KAAA,UACA,KAAA,YACA,KAAA,YACA,KAAA,uBACA,KAAA,WACA,KAAA,qBACA,KAAA,iDACA,KAAA,0BACA,KAAA,gBACA,KAAA,+BACA,KAAA,8BACA,KAAA,qCACA,KAAA,UACA,KAAA,eACA,KAAA,0BACA,KAAA,iBACA,KAAA,YACA,KAAA,WACA,KAAA,eACA,KAAA,iBACA,KAAA,cACA,KAAA,8BACA,KAAA,aACA,KAAA,aACA,KAAA,oBACA,KAAA,YACA,KAAA,iBACA,KAAA,iDACA,KAAA,gBACA,KAAA,UACA,KAAA,cACA,KAAA,UACA,KAAA,aACA,KAAA,2BACA,KAAA,cACA,KAAA,WACA,KAAA,gBACA,KAAA,yBACA,KAAA,8BACA,KAAA,eACA,KAAA,iCACA,KAAA,aACA,KAAA,gBACA,KAAA,SACA,KAAA,YACA,KAAA,UACA,KAAA,wBACA,KAAA,YACA,KAAA,WACA,KAAA,iBACA,K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ACA,kBACA,gBACA,kBACA,gCACA,uBACA,oBACA,qBACA,mBACA,oBACA,iBACA,sBACA,kBACA,kBACA,oBAGA,SACAuK,EACAmB,EACA+C,EACAQ,EACAuC,EACAC,EACAC,EACAE,EACAU,EACAC,EACA9O,EACA+K,EACAgE,EACApL,EACAqL,EACAC,EACAC,EACAG,EACAC,EACAU,EACAC,EACAC,EACAQ,GAGA,OACAC,OAAA,yDAEAC,OAAA,0CAEA5F,QAAAA,EACAQ,MAAAA,EACAuC,OAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAE,UAAAA,EACAU,WAAAA,EACAC,MAAAA,EACA9O,IAAAA,EACA+K,MAAAA,EACAgE,mBAAAA,EACApL,WAAAA,EACAqL,QAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAG,QAAAA,EACAC,KAAAA,EACAU,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAQ,OAAAA,EAEAG,UAAA,SAAAC,GACA,IAAA,GAAAxR,KAAAH,MACAA,KAAA8G,eAAA3G,IAAA,cAAAA,IACAwR,EAAAxR,GAAAH,KAAAG","sourcesContent":["define('bridalapp/class',[], function(){\r\n\t/**\r\n\t * Class([name] [, parent], object [, object] [, object])\r\n\t *\r\n\t * Creates a new class with the given name, parent and methods.\r\n\t *\r\n\t * name    String, Optional. The name of the new class. \r\n\t *         If not specified the new class will be anonymous.\r\n\t * parent  Class object, optional. The parent class for the new class.\r\n\t * object  Object, Required. One or more objects containing the methods \r\n\t *         and fields to add to the new class.\r\n\t */\r\n\tfunction Class() {\r\n\t\tvar name = '', parent = null, args = arrayify(arguments);\r\n\t\tif (typeof args[0] === 'string' || args[0] instanceof String) {\r\n\t\t\tname = args.shift();\r\n\t\t}\r\n\t\tif (typeof args[0] === 'function') {\r\n\t\t\tparent = args.shift();\r\n\t\t}\r\n\t\tvar classname = name || 'klass';\r\n\t\teval('var klass = function ' + classname + '() {this.initialize.apply(this, arguments);}'); // jshint ignore:line\r\n\t\tklass.classname = classname;\r\n\t\tklass.superclass = parent;\r\n\t\tklass.subclasses = [];\r\n\r\n\t\tif (parent) {\r\n\t\t\tvar subclass = function() { };\r\n\t\t\tsubclass.prototype = parent.prototype;\r\n\t\t\tklass.prototype = new subclass();\r\n\t\t\tparent.subclasses.push(klass);\r\n\t\t}\r\n\r\n\t\tfor (var i=0, len=args.length; i<len; i++) {\r\n\t\t\taddMethods(klass, args[i]);\r\n\t\t}\r\n\t\tif (!klass.prototype.initialize) {\r\n\t\t\tklass.prototype.initialize = function() { };\r\n\t\t}\r\n\t\tklass.prototype.constructor = klass;\r\n\t\treturn klass;\r\n\t}\r\n\r\n\tClass.subclass = function Class_subclass(klass, name) {\r\n\t\tif (!klass) {return;}\r\n\t\tif (klass.classname === name) {return klass;}\r\n\t\tfor (var i=0, sub; sub=klass.subclasses[i]; i++) {\r\n\t\t\tif (sub.classname === name) {return sub;}\r\n\t\t\tvar subsub = Class.subclass(sub, name);\r\n\t\t\tif (subsub) {return subsub;}\r\n\t\t}\r\n\t};\r\n\r\n\tfunction argumentNames(fn) {\r\n\t\tvar i, len, names = fn.toString().match(/^[\\s\\(]*function[^(]*\\((.*?)\\)/)[1].split(',');\r\n\t\tfor (i=0, len=names.length; i<len; i++) {\r\n\t\t\tnames[i] = names[i].replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n\t\t}\r\n\t\treturn len === 1 && !names[0] ? [] : names;\r\n\t}\r\n\r\n\tfunction arrayify(it) {\r\n\t\tif (!it) {return [];}\r\n\t\tif ('toArray' in Object(it)) {return it.toArray();}\r\n\t\tvar len = it.length || 0, results = new Array(len);\r\n\t\twhile (len--) {results[len] = it[len];}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tfunction bind(func) {\r\n\t\tif (arguments.length < 3 && arguments[1] === undefined) {return func;}\r\n\t\tvar args = arrayify(arguments), obj = args.splice(0, 2)[1];\r\n\t\treturn function() {\r\n\t\t\treturn func.apply(obj, args.concat(arrayify(arguments)));\r\n\t\t};\r\n\t}\r\n\r\n\tfunction wrap(func, wrapper) {\r\n\t\treturn function() {\r\n\t\t\treturn wrapper.apply(this, [bind(func, this)].concat(arrayify(arguments)));\r\n\t\t};\r\n\t}\r\n\r\n\tfunction addMethods(klass, src) {\r\n\t\tfunction keys(obj) {\r\n\t\t\tvar results = [];\r\n\t\t\tfor (var key in obj) {\r\n\t\t\t\tresults.push(key);\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t}\r\n\r\n\t\tvar ancestor = klass.superclass && klass.superclass.prototype, props = keys(src);\r\n\r\n\t\tfor (var i=0, key; key=props[i]; i++) {\r\n\t\t\tvar val = src[key];\r\n\t\t\tif (ancestor && (typeof val === 'function')) {\r\n\t\t\t\tvar argNames = argumentNames(val);\r\n\t\t\t\tif ((argNames.length > 0) && (argNames[0] === '$super')) {\r\n\t\t\t\t\tvar method = val;\r\n\t\t\t\t\tval = wrap((function(m) {\r\n\t\t\t\t\t\treturn function() {\r\n\t\t\t\t\t\t\treturn ancestor[m].apply(this, arguments); \r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t})(key), method); // jshint ignore:line\r\n\t\t\t\t\tval.valueOf = bind(method.valueOf, method);\r\n\t\t\t\t\tval.toString = bind(method.toString, method);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tklass.prototype[key] = val;\r\n\t\t}\r\n\t}\r\n\r\n\treturn Class;\r\n});\r\n\n","define('bridalapp/log',[], function () {\r\n\tvar METHODS = ['log','info','warn','error'],\r\n\t\tout = ('console' in this) && console.error ? console : {},\r\n\t\tcon = {}, // save backups of native console functions here\r\n\t\tnul = {}, // keep empty console functions here\r\n\t\ti, key;\r\n\r\n\tfor (i=0; key=METHODS[i]; i++) {\r\n\t\tnul[key] = function(){};\r\n\t\tcon[key] = out[key] || nul[key];\r\n\t}\r\n\r\n\tfunction log() {\r\n\t\treturn out;\r\n\t}\r\n\r\n\tlog.level = function log_level(lvl) {\r\n\t\tif ((lvl !== undefined) && (lvl >= 0) && (lvl <= 4) && (lvl !== logLevel)) {\r\n\t\t\tlogLevel = lvl;\r\n\t\t\t// modify the console methods: \r\n\t\t\t// those which are below the current log level get replaced by empty functions\r\n\t\t\tfor (var i=0,fn; fn=METHODS[i]; i++) {\r\n\t\t\t\tout[fn] = i >= lvl ? con[fn] : nul[fn];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn logLevel;\r\n\t};\r\n\r\n\tlog.level.DEBUG = 0;\r\n\tlog.level.INFO = 1;\r\n\tlog.level.WARN = 2;\r\n\tlog.level.ERROR = 3;\r\n\tlog.level.NONE = 4;\r\n\t\r\n\tvar logLevel = log.level(log.level.INFO);\r\n\r\n\treturn log;\r\n});\r\n\n","define('bridalapp/datastore',['bridalapp/class'], function (Class) {\r\n\t'use strict';\r\n\t\r\n\t/**\r\n\t * 'Abstract' base class for datastores.\r\n\t * \r\n\t * <p>Interaction with the datastore happens through four methods:</p>\r\n\t * <dl>\r\n\t *   <dt><code>Promise <b>load</b>(criteria, pageSize, pageIndex)</code></dt>\r\n\t *   <dd>Loads items from the store that match the given <code>criteria</code> (if any), \r\n\t *       paging the results if so desired.</dd>\r\n\t *   <dt><code>Promise <b>count</b>(criteria)</code></dt>\r\n\t *   <dd>Counts the items that match the given <code>criteria</code> (if any). This count\r\n\t *       can be used to calculate the <code>pageIndex</code> parameters when using paging.</dd>\r\n\t *   <dt><code>Promise <b>save</b>(items)</code></dt>\r\n\t *   <dd>Adds new items to the store, or updates existing items.</dd>\r\n\t *   <dt><code>Promise <b>delete</b>(items)</code></dt>\r\n\t *   <dd>Permanently deletes items from the store.</dd>\r\n\t * </ul>\r\n\t * <p>All three methods return a <code>Promise</code> that resolves to an \r\n\t * 'immutable' array(-like) with the fetched, changed or deleted items in it.</p>\r\n\t * \r\n\t * <p>Furthermore, the store can be observed for changes by attaching a listener\r\n\t * to the <code>change</code> event using the <code>on</code> method:</p>\r\n\t * <code><pre>\r\n\t * myDataStore.on('change', function() {\r\n\t *   // The store has changed. \r\n\t * });\r\n\t * </pre></code>\r\n\t * <p>The listener(s) can be removed again using the <code>off</code> method:</p>\r\n\t * <code><pre>\r\n\t * myDataStore.off('change', myListener); // removes myListener from change event\r\n\t * myDataStore.off('change'); // removes all listeners from change event\r\n\t * </pre></code>\r\n\t * \r\n\t */\r\n\tvar DataStore = Class('DataStore', {\r\n\t\t\r\n\t\tinitialize: function DataStore_initialize(name, url, cfg) {\r\n\t\t\tthis.name = name;\r\n\t\t\tthis.url = url || ''; // storetype://path/to/repository/store\r\n\t\t\tthis.cfg = cfg || {};\r\n\t\t\tthis.cfg.listeners = this.cfg.listeners || {};\r\n\t\t\tthis.cfg.throttle = this.cfg.throttle || {};\r\n\t\t},\r\n\t\t\r\n\t\ton: function DataStore_on(event, listener) {\r\n\t\t\tthis.cfg.listeners[event] = this.cfg.listeners[event] || [];\r\n\t\t\tthis.cfg.listeners[event].push(listener);\r\n\t\t},\r\n\r\n\t\ttrigger: function DataStore_trigger(event) {\r\n\t\t\tvar me = this, cfg = me.cfg, listeners = cfg.listeners[event];\r\n\t\t\tif (listeners) {\r\n\t\t\t\tif (! cfg.throttle[event]) {\r\n\t\t\t\t\tcfg.throttle[event] = {\r\n\t\t\t\t\t\ttriggered: Date.now()\r\n\t\t\t\t\t};\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tvar throttle = cfg.throttle[event];\r\n\t\t\t\tif (throttle.timeout &&\t(Date.now() < throttle.triggered + 250)) {\r\n\t\t\t\t\tclearTimeout(throttle.timeout);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrottle.triggered = Date.now();\r\n\t\t\t\t}\r\n\t\t\t\tthrottle.timeout = setTimeout(function(){\r\n\t\t\t\t\tfor (var i=0,listener; listener=listeners[i]; i++) {\r\n\t\t\t\t\t\tlistener.call(me);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrottle.timeout = null;\r\n\t\t\t\t}, 10);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toff: function DataStore_off(event, listener) {\r\n\t\t\tif (this.cfg.listeners[event]) {\r\n\t\t\t\tif (listener) {\r\n\t\t\t\t\tfor (var i=this.cfg.listeners[event].length-1; i>=0; i--) {\r\n\t\t\t\t\t\tif (this.cfg.listeners[event][i] === listener) {\r\n\t\t\t\t\t\t\treturn this.cfg.listeners[event].splice(i, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar results = this.cfg.listeners[event];\r\n\t\t\t\t\tdelete this.cfg.listeners[event];\r\n\t\t\t\t\treturn results;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n//      ABSTRACT-------------------------------------------------------------------------------------------\r\n//\t\t                    'abstract' methods each datastore should have.\r\n//      ---------------------------------------------------------------------------------------------------\r\n\r\n\t\t/**\r\n\t\t * Loads all items from this store matching the given <code>criteria</code>.\r\n\t\t * \r\n\t\t * <p>This method returns a <code>Promise</code> that resolves to an array(-like) that should be\r\n\t\t * treated as immutable. To mutate the store, use <code>save</code> and <code>delete</code>.</p>\r\n\t\t * \r\n\t\t * @param criteria Criteria to match on. Optional. Object.\r\n\t\t * @param pageSize Limits the number of results to fetch. Optional. Number.\r\n\t\t * @param pageIndex Indicates which results to fetch. Optional. Only applies when \r\n\t\t *        <code>pageSize &gt; 0</code>. Number. \r\n\t\t * \r\n\t\t * @return A <code>Promise<code> that resolves to an 'immutable' array of items, \r\n\t\t *         possibly empty but never <code>null</code> or <code>undefined</code>.\r\n\t\t */\r\n\t\tload: function DataStore_load(criteria, pageSize, pageIndex) {\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve([]);\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Counts the items matching the given <code>criteria</code>.\r\n\t\t * \r\n\t\t * <p>This method returns a <code>Promise</code> that resolves to the number of items that match\r\n\t\t * the given <code>criteria</code>, or to the total number of items if no <code>criteria</code> \r\n\t\t * were given. Using this number (which will be typically obtained with an efficient operation\r\n\t\t * such as <code>SELECT COUNT(..)</code>) you can calculate the number of pages for a certain\r\n\t\t * <code>pageSize</code> and thus determine the valid range for the <code>pageIndex</code>\r\n\t\t * parameter of the <code>load</code> operation.</p>\r\n\t\t * \r\n\t\t * @param criteria Criteria to match on. Optional. Object.\r\n\t\t * \r\n\t\t * @return A <code>Promise<code> that resolves to an 'immutable' array of items, \r\n\t\t *         possibly empty but never <code>null</code> or <code>undefined</code>.\r\n\t\t */\r\n\t\tcount: function DataStore_count(criteria) {\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve(0);\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Saves the given <code>item</code>(s).\r\n\t\t * \r\n\t\t * <p>Returns a <code>Promise</code> that resolves to an 'immutable' array(-like) with the added \r\n\t\t * or changed items. These items may have changes compared with the given items (such as last \r\n\t\t * modified date, version etc) so the originals are stale after this method completes.</p> \r\n\t\t * \r\n\t\t * <p>The argument can be an instance of <code>Persistent</code> or an array(-like) of instances \r\n\t\t * of <code>Persistent.</code>. Multiple arguments can be given. These are all ways to save \r\n\t\t * three persistent objects <code>a</code>, <code>b</code> and <code>c</code>:</p>\r\n\t\t * \r\n\t\t * <code><pre>\r\n\t\t * myDataStore.save(a);\r\n\t\t * myDataStore.save(b);\r\n\t\t * myDataStore.save(c);\r\n\t\t * // or\r\n\t\t * myDataStore.save(a, b, c);\r\n\t\t * // or\r\n\t\t * myDataStore.save([a,b,c]);\r\n\t\t * // or\r\n\t\t * myDataStore.save(a, [b,c]);\r\n\t\t * // etc...\r\n\t\t * </pre></code>\r\n\t\t * \r\n\t\t * <p>If we need to wait for the result of the operation, we can do so like this:</p>\r\n\t\t * \r\n\t\t * <code><pre>\r\n\t\t * myDataStore.save(myItems).then(function(results){\r\n\t\t *    // Hooray! The items are saved!\r\n\t\t *    for (var i=0, item; item=results[i]; i++) { \r\n\t\t *       // do something kick-ass with this item\r\n\t\t *       alert('Yeah! ' + item + ' is saved!'); \r\n\t\t *    }\r\n\t\t * }).catch(function(e){\r\n\t\t *    // Oh no!! Something went wrong!\r\n\t\t *    alert('There was an error: ' + e);\r\n\t\t * });\r\n\t\t * </pre></code>\r\n\t\t * \r\n\t\t * \r\n\t\t * @param  item Either a single persistent item or an array(-like) of persistent items. \r\n\t\t * @return A <code>Promise</code> that resolves to an 'immutable' array of items that were added \r\n\t\t *         or changed. Possibly empty but never <code>null</code> or <code>undefined</code>.\r\n\t\t */\r\n\t\tsave: function DataStore_save(item) {\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve(item.length === undefined ? [item] : item);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Permanently deletes the given <code>item</code>s.\r\n\t\t * \r\n\t\t * <p>Returns a <code>Promise</code> that yields the removed items in an array(-like). \r\n\t\t * The returned array(-like) should be treated as immutable.</p>\r\n\t\t * \r\n\t\t * <p>The argument can be an instance of Persistent or an array(-like) of instances of Persistent. \r\n\t\t * Just like with <code>save()</code>, multiple arguments can be given.</p>\r\n\t\t * \r\n\t\t * @param  item Either a single persistent item or an array(-like) of persistent items. \r\n\t\t * @return An 'immutable' array of items that were removed. Possibly empty but never <code>null</code>.\r\n\t\t */\r\n\t\tdelete: function DataStore_delete(item) {\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve('length' in item ? item : [item]);\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n//      /ABSTRACT------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\ttoString: function DataStore_toString() {\r\n\t\t\treturn '[Object ' + this.constructor.classname + ' \\'' + this.name + '\\' {url: \\'' + this.url + '\\'}]';\r\n\t\t}\r\n\t});\r\n\r\n\t/** Registry of datastore factories by type. */\r\n\tDataStore.typeFactories = {};\r\n\t\r\n\t/** Registers the datastore <code>factory</code> as 'protocol handler' for the given <code>type</code>. */\r\n\tDataStore.registerType = function DataStore_registerType(type, factory) {\r\n\t\tif (! DataStore.typeFactories[type]) {\r\n\t\t\tDataStore.typeFactories[type] = factory;\r\n\t\t}\r\n\t};\r\n\t\r\n\t/** Creates a new datastore from the given <code>type</code>. */\r\n\tDataStore.fromType = function DataStore_fromType(name, type, url, cfg) {\r\n\t\treturn DataStore.typeFactories[type](name, url, cfg);\r\n\t};\r\n\t\r\n\t/** Creates a new datastore from the given <code>url</code>. */\r\n\tDataStore.fromUrl = function DataStore_fromUrl(name, url, cfg) {\r\n\t\tif (! url) {return null;}\r\n\t\tvar idx = url.indexOf('://'),\r\n\t\t\ts = url.substring(0, idx), \r\n\t\t\ttype = s === 'https' ? 'http' : (s || 'http');\r\n\t\treturn DataStore.fromType(name, type, url, cfg);\r\n\t};\r\n\t\r\n\treturn DataStore;\r\n});\r\n\n","define('bridalapp/synchabledatastore',['suid', 'bridalapp/class', 'bridalapp/datastore'], function (Suid, Class, DataStore) {\r\n\t'use strict';\r\n\t\r\n\t/**\r\n\t * 'Abstract' base class for local datastores that can synched with some backend.\r\n\t * \r\n\t * <p>The main API of synchable datastores is:</p>\r\n\t * \r\n\t * <dl>\r\n\t *   <dt><code>Boolean <b>lookSynched</b>()</code></dt>\r\n\t *   <dd>Indicates whether the datastore looks synched (from this end).</dd>\r\n\t *   <dt><code>Promise <b>synch</b>()</code></dt>\r\n\t *   <dd>Brings this datastore back into synch.</dd>\r\n\t *   <dt><code>Boolean <b>isSynching</b>()</code></dt>\r\n\t *   <dd>Indicates whether this datastore is currently busy synching.</dd>\r\n\t *   <dt><code>Array(-like) <b>items</b>()</code></dt>\r\n\t *   <dd>Returns an 'immutable' array(-like) that represents a live view of the items \r\n\t *       maintained in this store.</dd>\r\n\t *   <dt><code>Array <b>createdItems</b>()</code></dt>\r\n\t *   <dd>'Immutable' array of items that have been added to the store since the last synch.</dd>\r\n\t *   <dt><code>Array <b>updatedItems</b>()</code></dt>\r\n\t *   <dd>'Immutable' array of items that have been updated since the last synch.</dd>\r\n\t *   <dt><code>Array <b>deletedItems</b>()</code></dt>\r\n\t *   <dd>'Immutable' array of items that have been deleted from the store since the last synch.</dd>\r\n\t *   <dt><code>Array <b>staleItems</b>()</code></dt>\r\n\t *   <dd>'Immutable' array of items that could not be saved during the last synch because they went stale.</dd>\r\n\t *   <dt><code>Array <b>failedItems</b>()</code></dt>\r\n\t *   <dd>'Immutable' array of items that could not be saved during the last synch because they had errors.</dd>\r\n\t *   <dt><code>Array <b>futureItems</b>()</code></dt>\r\n\t *   <dd>'Immutable' array of items that were already updated when a synch started and were then updated again while synch was in progress.</dd>\r\n\t * </dl>\r\n\t * \r\n\t * <p>synchable datastores are assumed to have fast access to (a cache of) all data they maintain.\r\n\t * As such they provide a synchronous API for accessing and mutating the data in the datastore \r\n\t * that is easier to work with than the default asynchronous <code>load</code>, <code>count</code>, \r\n\t * <code>save</code> and <code>delete</code> methods:</p>\r\n\t * \r\n\t * <dl>\r\n\t *   <dt><code>Array get(criteria, pageSize, pageIndex)</code></dt>\r\n\t *   <dd>Synchronous equivalent of <code>load</code>.</dd>\r\n\t *   <dt><code>Number len(criteria)</code></dt>\r\n\t *   <dd>Synchronous equivalent of <code>count</code>.</dd>\r\n\t *   <dt><code>Array set(item)</code></dt>\r\n\t *   <dd>Synchronous equivalent of <code>save</code>.</dd>\r\n\t *   <dt><code>Array del(item)</code></dt>\r\n\t *   <dd>Synchronous equivalent of <code>delete</code>.</dd>\r\n\t * </dl>\r\n\t * \r\n\t * <p>The synchronous methods operate on the locally cached data. As such, the\r\n\t * methods <code>set</code> and <code>del</code> will usually make the datastore\r\n\t * <i>out of synch</i>. You can check whether the datastore still looks in synch\r\n\t * with <code>looksSynched</code> and bring it back in synch with <code>synch</code>.</p>\r\n\t * \r\n\t * <p>Unlike their asynchonous counterparts, the synchronous methods <code>set</code>\r\n\t * and <code>del</code> return the items unchanged, so essentially they can be\r\n\t * discarded.</p>\r\n\t */\r\n\tvar SynchableDataStore = Class('SynchableDataStore', DataStore, {\r\n\t\t\r\n\t\tinitialize: function SynchableDataStore_initialize($super, name, url, cfg) {\r\n\t\t\t$super(name, url, cfg);\r\n\t\t},\r\n\t\t\r\n\t\t/** \r\n\t\t * Synchronous equivalent of <code>load</code>.\r\n\t\t * \r\n\t\t * <p>No remote request will actually be fired. The filtering based on the\r\n\t\t * given <code>criteria</code> and the paging both happen client-side and\r\n\t\t * will be fast as long as the dataset is not too large.</p>\r\n\t\t */\r\n\t\tget: function SynchableDataStore_get(criteria, pageSize, pageIndex, clone) {\r\n\t\t\tvar items = clone ? Persistent.clone(this.items()) : this.items();\r\n\t\t\treturn Persistent.page(Persistent.matches(items, criteria), pageSize, pageIndex);\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Synchronous equivalent of <code>count</code>.\r\n\t\t *  \r\n\t\t * <p>No remote request will actually be fired. This method just calls\r\n\t\t * <code>get</code> with the given <code>criteria</code> and returns\r\n\t\t * the number of results it got.</p>\r\n\t\t */\r\n\t\tlen: function SynchableDataStore_len(criteria) {\r\n\t\t\treturn this.get(criteria).length;\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Indicates whether this datastore looks synchronized (from this end). \r\n\t\t * \r\n\t\t * <p>This method will return <code>false</code> if there are any outstanding changes, \r\n\t\t * but this method returning <code>true</code> does not guarantee anything as it is \r\n\t\t * impossible to determine whether something was changed on the remote side without\r\n\t\t * actually making a request.\r\n\t\t */\r\n\t\tlooksSynched: function SynchableDataStore_looksSynched() {\r\n\t\t\t// if lastSynched == Date(0) (epoch) it means we are not synched\r\n\t\t\t// if there are any items in any of the lists it means we are not in synch\r\n\t\t\treturn (this.lastSynched().getTime() !== 0) && \r\n\t\t\t\t\t(! (this.createdItems().length || this.updatedItems().length || this.deletedItems().length));\r\n\t\t},\r\n\t\t\r\n\r\n//\t\tABSTRACT-------------------------------------------------------------------------\r\n//\t\t             'abstract' methods each synchable datastore should have\r\n//\t\t---------------------------------------------------------------------------------\r\n\t\t/** \r\n\t\t * Brings this datastore back into synch.\r\n\t\t * \r\n\t\t * <p>Returns a promise that resolves on synch complete or rejects on\r\n\t\t * synch failure. The arrays returned by <code>staleItems</code> and \r\n\t\t * <code>failedItems</code> will be updated with items that could not\r\n\t\t * be saved because they had been changed on the remote server in the\r\n\t\t * meantime, or that gave (integrity constraint) validation errors,\r\n\t\t * respectively.</p> \r\n\t\t */\r\n\t\tsynch: function SynchableDataStore_synch() {return new Promise(function(resolve){resolve();})},\r\n\r\n\t\t/** Indicates whether this datastore is currently busy synching. */\r\n\t\tisSynching: function SynchableDataStore_isSynching() {return false;},\r\n\t\t\r\n\t\t/** Gets or sets the (device) date time this datastore was last synched. */\r\n\t\tlastSynched: function SynchableDataStore_lastSynched(newDate) {return newDate || new Date();},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns an 'immutable' array that represents a live view of the items\r\n\t\t * maintained in this store. \r\n\t\t * \r\n\t\t * <p>The result of this method can be used for observing/monitoring the\r\n\t\t * data set. DO NOT MUTATE THIS ARRAY!.</p>\r\n\t\t */\r\n\t\titems: function SynchableDataStore_items() {},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that have been added to the store since the last synch. */\r\n\t\tcreatedItems: function SynchableDataStore_createdItems() {return [];},\r\n\t\t\r\n\t\t/** 'Immutable' array of the original versions of items that have been updated since the last synch. */\r\n\t\tupdatedItems: function SynchableDataStore_updatedItems() {return [];},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that have been deleted since the last synch. */\r\n\t\tdeletedItems: function SynchableDataStore_deletedItems() {return [];},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that could not be saved during the last synch because they went stale. */\r\n\t\tstaleItems: function SynchableDataStore_staleItems() {return [];},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that could not be saved during the last synch because they had errors. */\r\n\t\tfailedItems: function SynchableDataStore_failedItems() {return [];},\r\n\t\t\r\n\t\t/** \r\n\t\t * 'Immutable' array of items that were already updated when a synch started and were then updated again while synch was in progress.\r\n\t\t *  These items are effectively stale, but because the user edited his own items, we can safely assume\r\n\t\t *  he wishes to overwrite the remote version with the item that is in this list.\r\n\t\t */\r\n\t\tfutureItems: function SynchableDataStore_failedItems() {return [];},\r\n\r\n\t\t/** \r\n\t\t * Synchronous equivalent of <code>save</code>.\r\n\t\t * \r\n\t\t * <p>The arrays returned by <code>updatedItems</code>, <code>createdItems</code>\r\n\t\t * and <code>removedItems</code> will be updated to reflect the changes made\r\n\t\t * to the datastore since the last synch.</p>\r\n\t\t */\r\n\t\tset: function SynchableDataStore_set(item) {return item},\r\n\t\t\r\n\t\t/**\r\n\t\t * Synchronous equivalent of <code>delete</code>.\r\n\t\t *  \r\n\t\t * <p>The arrays returned by <code>updatedItems</code>, <code>createdItems</code>\r\n\t\t * and <code>removedItems</code> will be updated to reflect the changes made\r\n\t\t * to the datastore since the last synch.</p>\r\n\t\t */\r\n\t\tdel: function SynchableDataStore_del(item) {return item},\r\n//\t\t/ABSTRACT------------------------------------------------------------------------\r\n\t\t\r\n\t\ttoString: function SynchableDataStore_toString($super) {\r\n\t\t\tvar s = $super();\r\n\t\t\ts = s.substring(0, s.length - 2);\r\n\t\t\treturn '[Object ' + this.constructor.classname + ' \\'' + this.name + '\\' {' + \r\n\t\t\t\t\t'url: \\'' + this.url + '\\', ' + \r\n\t\t\t\t\t'lastSynched:' + this.lastSynched() + ', ' + \r\n\t\t\t\t\t'items:' + this.items().length + ', ' + \r\n\t\t\t\t\t'created:' + this.createdItems().length + ', ' + \r\n\t\t\t\t\t'updated:' + this.updatedItems().length + ', ' + \r\n\t\t\t\t\t'deleted:' + this.deletedItems().length + ', ' + \r\n\t\t\t\t\t'stale:' + this.staleItems().length + ', ' +\r\n\t\t\t\t\t'failed:' + this.failedItems().length + '}]';\r\n\t\t}\r\n\t});\r\n\t\r\n\t\r\n\treturn SynchableDataStore;\r\n});\r\n\n","define('bridalapp/persistent',['bridalapp/class', 'suid'], function (Class, Suid) {\r\n\tvar Persistent = Class('Persistent', {\r\n\t\tinitialize: function Persistent_initialize(obj) {\r\n\t\t\tthis.type = this.constructor.classname;\r\n\t\t\tthis.id = Suid(0);\r\n\t\t\tthis.version = null;\r\n\t\t\tfor (var key in obj) {\r\n\t\t\t\tif (typeof key !== 'function') {\r\n\t\t\t\t\tthis.addProp(key, obj[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\taddProp: function Persistent_addProp(name, value, def) {\r\n\t\t\tif ((value !== undefined) || (def !== undefined)) {\r\n\t\t\t\tthis[name] = value !== undefined ? value : def;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tequals: function Persistent_equals(other){\r\n\t\t\treturn other && (\r\n\t\t\t\t\t(other instanceof Persistent && other.id.value === this.id.value) ||\r\n\t\t\t\t\t(other instanceof Suid && other.value === this.id.value) || \r\n\t\t\t\t\t(other == this.id.value) \r\n\t\t\t) ;\r\n\t\t},\r\n\t\t\r\n\t\ttoString: function Persistent_toString() {\r\n\t\t\treturn '[Object ' + this.type + ' ' + this.toStringProperties() + ']';\r\n\t\t},\r\n\t\t\r\n\t\ttoStringProperties: function Persistent_toStringProperties() {\r\n\t\t\treturn this.id.toString() + ' v' + this.version\r\n\t\t}\r\n\t});\r\n\t\r\n\tPersistent.revive = function Persistent_revive(key, value) {\r\n\t\tvar t = value && typeof value === 'object' && typeof value.type === 'string' && value.type,\r\n\t\t\tconstructor = Class.subclass(Persistent, t);\r\n\t\treturn constructor ? new constructor(value) : Suid.revive(key, value);\r\n\t}; \r\n\t\r\n\tPersistent.fromJSON = function Persistent_fromJSON(json) {\r\n\t\treturn JSON.parse(json, Persistent.revive);\r\n\t};\r\n\t\r\n\tPersistent.persistent = function Persistent_persistent(arg) {\r\n\t\tif (arguments.length === 1) {return arg instanceof Persistent && arg.version !== null;}\r\n\t\tvar results = [];\r\n\t\tfor (var i=0; arg=arguments[i]; i++) {\r\n\t\t\tif (Persistent.persistent(arg)) {results.push(arg);}\r\n\t\t\telse if ('length' in arg){\r\n\t\t\t\tfor (var j=0, item; item=arg[j]; j++) {\r\n\t\t\t\t\tif (Persistent.persistent(item)) {results.push(item);}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\t\r\n\tPersistent.equals = function Persistent_static_equals(one, other, comparator) {\r\n\t\treturn (one == other ||\r\n\t\t\t\t(comparator && comparator(one, other) === 0) ||\r\n\t\t\t\tone && one.equals && one.equals(other) ||\r\n\t\t\t\tother && other.equals && other.equals(one) ||\r\n\t\t\t\t(typeof one === 'object' && one && one.valueOf() == other) ||\r\n\t\t\t\t(typeof other === 'object' && other && other.valueOf() == one));\r\n\t};\r\n\t\r\n\t// returns index of given element in given list, using given comparator\r\n\tPersistent.indexOf = function Persistent_indexOf(list, element, comparator) {\r\n\t\tfor (var i=0, item; item=list[i]; i++) {\r\n\t\t\tif (Persistent.equals(item, element)) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n\r\n\t// CRITERIA on the cheap\r\n\tPersistent.matches = function Persistent_matches(items, criteria) {\r\n\t\tvar results = Array.prototype.concat.call(items || []);\r\n\t\tif (criteria) {\r\n\t\t\tfor (var i=results.length-1; i>=0; i--) {\r\n\t\t\t\tfor (var key in criteria) {\r\n\t\t\t\t\tif (criteria.hasOwnProperty(key)) {\r\n\t\t\t\t\t\tif ((Array.isArray && Array.isArray(criteria[key])) || (criteria[key] instanceof Array)) {\r\n\t\t\t\t\t\t\tif (Persistent.indexOf(criteria[key], items[i][key]) === -1) {\r\n\t\t\t\t\t\t\t\tresults.splice(i,1);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (! Persistent.equals(items[i][key], criteria[key])) {\r\n\t\t\t\t\t\t\tresults.splice(i,1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\t\r\n\tPersistent.pluck = function Persistent_pluck(items, attr) {\r\n\t\tvar results = [];\r\n\t\tfor (var i=0,item; item=items[i]; i++) {\r\n\t\t\tif (item[attr] !== undefined) {\r\n\t\t\t\tresults.push(item[attr]); \r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\t\r\n\tPersistent.clone = function Persistent_clone(items) {\r\n\t\tvar results = [];\r\n\t\tif (arguments.length > 1) {return Persistent.clone(arguments);}\r\n\t\tif (! ('length' in items)) {return items instanceof Persistent && items.clone ? items.clone() : Persistent.fromJSON(JSON.stringify(items));}\r\n\t\tvar results = [];\r\n\t\tfor (var i=0, item; item=items[i]; i++) {\r\n\t\t\tresults.push(Persistent.clone(item));\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\t\r\n\tPersistent.page = function Persistent_page(results, pageSize, pageIndex) {\r\n\t\tif (pageSize) {\r\n\t\t\tvar start = (pageIndex || 0) * pageSize,\r\n\t\t\t\tend = pageIndex * (pageSize+1);\r\n\t\t\tif ((end < 0) || (end <= start) || (start > results.length)) {return [];}\r\n\t\t\treturn results.slice(Math.max(start,0), Math.min(end, results.length));\r\n\t\t}\r\n\t\treturn results;\r\n\t};\r\n\t\r\n\tPersistent.eachArg = function Persistent_eachArg(args, obj, fn) {\r\n\t\tif (('length' in args) && (! (args instanceof Persistent))) {\r\n\t\t\tvar results = [];\r\n\t\t\tfor (var i=0,item; item=args[i]; i++) {\r\n\t\t\t\tresults.push.apply(results, Persistent.eachArg(item, obj, fn));\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t}\r\n\t\treturn fn.call(obj, args);\r\n\t}\r\n\t\r\n\treturn Persistent;\r\n});\r\n\n","define('bridalapp/localdatastore',['bridalapp/class',\r\n\t\t'bridalapp/log',\r\n\t\t'bridalapp/datastore', \r\n\t\t'bridalapp/synchabledatastore', \r\n\t\t'bridalapp/persistent',\r\n\t\t'memorystorage'], \r\nfunction (Class, log, DataStore, SynchableDataStore, Persistent, MemoryStorage) {\r\n\t'use strict';\r\n\t\r\n\tvar LocalDataStore = Class('LocalDataStore', SynchableDataStore, {\r\n\r\n\t\tinitialize: function LocalDataStore_initialize($super, name, url, cfg) {\r\n\t\t\tlog().log('Initializing LocalDataStore `' + name + '`...');\r\n\t\t\t$super(name, url, cfg);\r\n\t\t\tif (!this.cfg.local || !this.cfg.store) { \r\n\t\t\t\tvar repoIdx = url.indexOf('://') + 3,\r\n\t\t\t\t\tstoreIdx = url.lastIndexOf('/'),\r\n\t\t\t\t\trepo = url.substring(repoIdx, storeIdx),\r\n\t\t\t\t\tstore = url.substring(storeIdx + 1);\r\n\t\t\t\tif (!this.cfg.repo) {this.cfg.repo = repo;}\r\n\t\t\t\tif (!this.cfg.store) {this.cfg.store = store;}\r\n\t\t\t}\r\n\t\t\tlog().log('Initialized LocalDataStore `' + name + '`.');\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Loads all items from this store matching the given <code>criteria</code>.\r\n\t\t * \r\n\t\t * <p>This method returns a <code>Promise</code> that resolves to an array(-like) that should be\r\n\t\t * treated as immutable. To mutate the store, use <code>save</code> and <code>delete</code>.</p>\r\n\t\t * \r\n\t\t * @param criteria Criteria to match on. Optional. Object.\r\n\t\t * @param pageSize Limits the number of results to fetch. Optional. Number.\r\n\t\t * @param pageIndex Indicates which results to fetch. Optional. Only applies when \r\n\t\t *        <code>pageSize &gt; 0</code>. Number. \r\n\t\t * \r\n\t\t * @return A <code>Promise<code> that resolves to an 'immutable' array of items, \r\n\t\t *         possibly empty but never <code>null</code> or <code>undefined</code>.\r\n\t\t */\r\n\t\tload: function LocalDataStore_load(criteria, pageSize, pageIndex) {\r\n\t\t\tlog().log('Loading LocalDataStore `' + name + '`...');\r\n\t\t\tvar store = this;\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve(store.get(criteria, pageSize, pageIndex));\r\n\t\t\t\tlog().log('Loaded LocalDataStore `' + name + '`.');\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Counts the items matching the given <code>criteria</code>.\r\n\t\t * \r\n\t\t * <p>This method returns a <code>Promise</code> that resolves to the number of items that match\r\n\t\t * the given <code>criteria</code>, or to the total number of items if no <code>criteria</code> \r\n\t\t * were given. Using this number (which will be typically obtained with an efficient operation\r\n\t\t * such as <code>SELECT COUNT(..)</code>) you can calculate the number of pages for a certain\r\n\t\t * <code>pageSize</code> and thus determine the valid range for the <code>pageIndex</code>\r\n\t\t * parameter of the <code>load</code> operation.</p>\r\n\t\t * \r\n\t\t * @param criteria Criteria to match on. Optional. Object.\r\n\t\t * \r\n\t\t * @return A <code>Promise<code> that resolves to an 'immutable' array of items, \r\n\t\t *         possibly empty but never <code>null</code> or <code>undefined</code>.\r\n\t\t */\r\n\t\tcount: function LocalDataStore_count(criteria) {\r\n\t\t\tlog().log('LocalDataStore `' + name + '` count() starting (criteria=' + criteria + ')...');\r\n\t\t\tvar store = this;\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve(store.len());\r\n\t\t\t\tlog().log('LocalDataStore `' + name + '` count() done: ' + store.len() + '.');\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Saves the given <code>item</code>(s).\r\n\t\t * \r\n\t\t * <p>Returns a <code>Promise</code> that resolves to an 'immutable' array(-like) with the added \r\n\t\t * or changed items. These items may have changes compared with the given items (such as last \r\n\t\t * modified date, version etc) so the originals are stale after this method completes.</p> \r\n\t\t * \r\n\t\t * <p>The argument can be an instance of <code>Persistent</code> or an array(-like) of instances \r\n\t\t * of <code>Persistent.</code>. Multiple arguments can be given. These are all ways to save \r\n\t\t * three persistent objects <code>a</code>, <code>b</code> and <code>c</code> (though they\r\n\t\t * differ in performance, bundling calls is quicker)</p>:\r\n\t\t * \r\n\t\t * <code><pre>\r\n\t\t * myDataStore.save(a);\r\n\t\t * myDataStore.save(b);\r\n\t\t * myDataStore.save(c);\r\n\t\t * // or\r\n\t\t * myDataStore.save(a, b, c);\r\n\t\t * // or\r\n\t\t * myDataStore.save([a,b,c]);\r\n\t\t * // or\r\n\t\t * myDataStore.save(a, [b,c]);\r\n\t\t * // etc...\r\n\t\t * </pre></code>\r\n\t\t * \r\n\t\t * <p>If we need to wait for the result of the operation, we can do so like this:</p>\r\n\t\t * \r\n\t\t * <code><pre>\r\n\t\t * myDataStore.save(myItems).then(function(results){\r\n\t\t *    // Hooray! The items are saved!\r\n\t\t *    for (var i=0, item; item=results[i]; i++) { \r\n\t\t *       // do something kick-ass with this item\r\n\t\t *       alert('Yeah! ' + item + ' is saved!'); \r\n\t\t *    }\r\n\t\t * }).catch(function(e){\r\n\t\t *    // Oh no!! Something went wrong!\r\n\t\t *    alert('There was an error: ' + e);\r\n\t\t * });\r\n\t\t * </pre></code>\r\n\t\t * \r\n\t\t * \r\n\t\t * @param  item Either a single persistent item or an array(-like) of persistent items. \r\n\t\t * @return A <code>Promise</code> that resolves to an 'immutable' array of items that were added \r\n\t\t *         or changed. Possibly empty but never <code>null</code> or <code>undefined</code>.\r\n\t\t */\r\n\t\tsave: function LocalDataStore_save(item) {\r\n\t\t\tlog().log('LocalDataStore `' + name + '` save() starting (item=' + item + ')...');\r\n\t\t\tvar store = this;\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve(store.set(item));\r\n\t\t\t\tlog().log('LocalDataStore `' + name + '` save() done.');\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Permanently deletes the given <code>item</code>s.\r\n\t\t * \r\n\t\t * <p>Returns a <code>Promise</code> that yields the removed items in an array(-like). \r\n\t\t * The returned array(-like) should be treated as immutable.</p>\r\n\t\t * \r\n\t\t * <p>The argument can be an instance of Persistent or an array(-like) of instances of Persistent. \r\n\t\t * Just like with <code>save()</code>, multiple arguments can be given.</p>\r\n\t\t * \r\n\t\t * @param  item Either a single persistent item or an array(-like) of persistent items. \r\n\t\t * @return An 'immutable' array of items that were removed. Possibly empty but never <code>null</code>.\r\n\t\t */\r\n\t\tdelete: function LocalDataStore_delete(item) {\r\n\t\t\tlog().log('LocalDataStore `' + name + '` delete() starting (item=' + item + ')...');\r\n\t\t\tvar store = this;\r\n\t\t\treturn new Promise(function(resolve){\r\n\t\t\t\tresolve(store.del(item));\r\n\t\t\t\tlog().log('LocalDataStore `' + name + '` delete() done.');\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\tset: function LocalDataStore_set(item) {\r\n\t\t\tlog().log('LocalDataStore `' + name + '` set() starting (item=' + item + ')...');\r\n\t\t\tvar results = Persistent.eachArg(arguments, this, function(item) {\r\n\t\t\t\tvar backup = null,\r\n\t\t\t\t\tidx = Persistent.indexOf(this.db().items, item);\r\n\t\t\t\tif (idx === -1) {this.db().items.push(item);} \r\n\t\t\t\telse {backup = this.db().items.splice(idx, 1, item)[0];}\r\n\t\t\t\t\r\n\t\t\t\t// item had been deleted previously?\r\n\t\t\t\tidx = Persistent.indexOf(this.db().deleted, item);\r\n\t\t\t\tif (idx !== -1) {\r\n\t\t\t\t\t// item was deleted, then added again, so effectively it was updated.\r\n\t\t\t\t\tbackup = this.db().deleted.splice(idx, 1);\r\n\t\t\t\t}\r\n\t\t\t\tif (backup) {\r\n\t\t\t\t\tidx = Persistent.indexOf(this.db().updated, item);\r\n\t\t\t\t\tif (idx === -1) {this.db().updated.push(backup);}\r\n\t\t\t\t\telse if (this.synching) {\r\n\t\t\t\t\t\t// the synch is already in progress... meaning when we get back the saved\r\n\t\t\t\t\t\t// item our new version would appear stale... So put it in future list\r\n\t\t\t\t\t\tidx = Persistent.indexOf(this.db().future, item);\r\n\t\t\t\t\t\tif (idx === -1) {this.db().future.push(item);}\r\n\t\t\t\t\t\telse {this.db().future.splice(idx, 1, item);}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn [item];\r\n\t\t\t});\r\n\t\t\tlog().log('LocalDataStore `' + name + '` set(): triggering change event.');\r\n\t\t\tthis.trigger('change');\r\n\t\t\tlog().log('LocalDataStore `' + name + '` set(): done.');\r\n\t\t\treturn results;\r\n\t\t},\r\n\r\n\t\tdel: function LocalDataStore_del(item) {\r\n\t\t\tlog().log('LocalDataStore `' + name + '` del() starting (item=' + item + ')...');\r\n\t\t\tvar results = Persistent.eachArg(arguments, this, function(item) {\r\n\t\t\t\tvar backup, idx = Persistent.indexOf(this.items(), item);\r\n\t\t\t\tif (idx !== -1) {backup = this.items().splice(idx, 1)[0];}\r\n\t\t\t\tif (Persistent.persistent(item)) {\r\n\t\t\t\t\t// if item was in updated list, remove it\r\n\t\t\t\t\tidx = Persistent.indexOf(this.db().updated, item);\r\n\t\t\t\t\tif (idx !== -1) {\r\n\t\t\t\t\t\tvar removed = this.db().updated.splice(idx, 1);\r\n\t\t\t\t\t\tbackup = backup || removed;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// if item was in future list, remove it\r\n\t\t\t\t\tidx = Persistent.indexOf(this.db().future, item);\r\n\t\t\t\t\tif (idx !== -1) {this.db().future.splice(idx, 1);}\r\n\t\t\t\t\t// if item was not in deleted list, add it (old version if we have it)\r\n\t\t\t\t\tidx = Persistent.indexOf(this.db().deleted, item);\r\n\t\t\t\t\tif (idx === -1) {this.db().deleted.push(backup || item);}\r\n\t\t\t\t}\r\n\t\t\t\treturn [backup || item];\r\n\t\t\t});\r\n\t\t\tlog().log('LocalDataStore `' + name + '` del(): triggering change event.');\r\n\t\t\tthis.trigger('change');\r\n\t\t\tlog().log('LocalDataStore `' + name + '` del(): done.');\r\n\t\t\treturn results;\r\n\t\t},\r\n\t\t\r\n\t\t/** Gets or sets the (device) date time this store was last synched. */\r\n\t\tlastSynched: function LocalDataStore_lastSynched(date) {\r\n\t\t\tif (date) {this.db().lastSynched = date;}\r\n\t\t\treturn this.db().lastSynched;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns an 'immutable' array that represents a live view of the items\r\n\t\t * maintained in this store. \r\n\t\t * \r\n\t\t * <p>The result of this method can be used for observing/monitoring the\r\n\t\t * data set. DO NOT MUTATE THIS ARRAY!.</p>\r\n\t\t */\r\n\t\titems: function LocalDataStore_items() {\r\n\t\t\treturn this.db().items;\r\n\t\t},\r\n\r\n\t\t/** List of created items is calculated dynamically based on which items are not persistent yet */\r\n\t\tcreatedItems: function LocalDataStore_createdItems() {\r\n\t\t\tvar results = [];\r\n\t\t\tfor (var i=0, item; item=this.items()[i]; i++) {\r\n\t\t\t\tif (! Persistent.persistent(item)) {results.push(item);}\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t},\r\n\t\t\r\n\t\tupdatedItems: function LocalDataStore_updatedItems() {\r\n\t\t\treturn this.db().updated;\r\n\t\t},\r\n\t\t\r\n\t\tdeletedItems: function LocalDataStore_deletedItems() {\r\n\t\t\treturn this.db().deleted;\r\n\t\t},\r\n\r\n\t\tstaleItems: function LocalDataStore_staleItems() {\r\n\t\t\treturn this.db().stale;\r\n\t\t},\r\n\t\t\r\n\t\tfailedItems: function LocalDataStore_failedItems() {\r\n\t\t\treturn this.db().failed;\r\n\t\t},\r\n\t\t\r\n\t\tfutureItems: function LocalDataStore_futureItems() {\r\n\t\t\treturn this.db().future;\r\n\t\t},\r\n\t\t\r\n\t\tdb: function LocalDataStore_db() {\r\n\t\t\tif (! this.cfg.local) {\r\n\t\t\t\tthis.cfg.local = new MemoryStorage(this.cfg.repo);\r\n\t\t\t\tif (! this.cfg.local[this.cfg.store]) {this.cfg.local[this.cfg.store] = {};}\r\n\t\t\t\tfor (var i=0,key; key=['items', 'updated', 'deleted', 'stale', 'failed', 'future'][i]; i++) {\r\n\t\t\t\t\tif (! this.db()[key]) {this.db()[key] = [];}\r\n\t\t\t\t}\r\n\t\t\t\tif(! this.db().lastSynched) {this.db().lastSynched = new Date(0);}\r\n\t\t\t}\r\n\t\t\treturn this.cfg.local[this.cfg.store];\r\n\t\t}\r\n\t});\r\n\t\r\n\tDataStore.registerType('local', function LocalDataStoreFactory(name, url, cfg) {\r\n\t\treturn new LocalDataStore(name, url, cfg);\r\n\t});\r\n\t\r\n\treturn LocalDataStore;\r\n});\r\n\n","define('bridalapp/restdatastore',['bridalapp/class', \r\n\t\t'jquery', \r\n\t\t'bridalapp/log', \r\n\t\t'bridalapp/persistent', \r\n\t\t'bridalapp/datastore'], \r\nfunction (Class, $, log, Persistent, DataStore) {\r\n\t'use strict';\r\n\t\r\n\tvar RestDataStore = Class('RestDataStore', DataStore, {\r\n\t\t\r\n\t\tinitialize: function RestDataStore_initialize($super, name, url, cfg) {\r\n\t\t\t$super(name, url, cfg);\r\n\t\t\tthis.cfg.retryCount = this.cfg.retryCount || 0;\r\n\t\t\tthis.cfg.retryWaitTime = this.cfg.retryWaitTime || 2000;\r\n\t\t\tthis.cfg.timeout = this.cfg.timeout || 10000;\r\n\t\t\tif (this.cfg.supportsSynch === undefined) {this.cfg.supportsSynch = false}\r\n\t\t},\r\n\r\n\t\tload: function RestDataStore_load(criteria, pageSize, pageIndex) {\r\n\t\t\t// TODO add criteria and paging parameters to the url\r\n\t\t\treturn this.remoteRequest('GET', this.url, {criteria: criteria, pageSize: pageSize, pageIndex: pageIndex});\r\n\t\t},\r\n\r\n\t\tcount: function RestDataStore_count(criteria) {\r\n\t\t\t// TODO do the right thing and implement a count query\r\n\t\t\t// needs work on the server side as well and not needed yet\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tthis.remoteRequest('GET', this.url, {criteria: criteria}).then(function(items){\r\n\t\t\t\t\tresolve(items.length);\r\n\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t});\r\n\t\t\t});  \r\n\t\t},\r\n\r\n\t\tsave: function RestDataStore_save(items) {\r\n\t\t\tvar all = Persistent.eachArg(items, this, function(item){return [item];});\r\n\t\t\treturn this.remoteRequest('POST', this.url + '/save', all);\r\n\t\t},\r\n\r\n\t\tdelete: function RestDataStore_delete(items) {\r\n\t\t\tvar all = Persistent.eachArg(items, this, function(item){return [item];});\r\n\t\t\treturn this.remoteRequest('DELETE', this.url, all);\r\n\t\t},\r\n\r\n\t\tsynch: function RestDataStore_synch(synchRequest) {\r\n\t\t\treturn this.remoteRequest('POST', this.url + '/synch', synchRequest);\r\n\t\t},\r\n\r\n\t\tremoteRequest: function RestDataStore_remoteRequest(method, url, data) {\r\n\t\t\treturn (function(method, url, data, timeout, retries, retryWait){\r\n\t\t\t\tvar THROTTLE = 5000,\r\n\t\t\t\t\tstarted = Date.now(),\r\n\t\t\t\t\tstore = this;\r\n\t\t\t\t\r\n\t\t\t\treturn new Promise(function(resolve, reject) {\r\n\t\t\t\t\tif ((method === 'GET') && data) {\r\n\t\t\t\t\t\tvar hashIdx = url.indexOf('#'),   \r\n\t\t\t\t\t\t\thash = hashIdx !== -1 ? url.substring(hashIdx) : '',\r\n\t\t\t\t\t\t\tqsIdx = url.indexOf('?'),\r\n\t\t\t\t\t\t\tqs = qsIdx !== -1 ? url.substring(qsIdx) : '';\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (data.criteria) {\r\n\t\t\t\t\t\t\tfor (var key in data.criteria) {\r\n\t\t\t\t\t\t\t\tif (data.criteria.hasOwnProperty(key)) {\r\n\t\t\t\t\t\t\t\t\tqs += (qs ? '&' : '') + encodeURIComponent(key) + '=' \r\n\t\t\t\t\t\t\t\t\t\t\t+ encodeURIComponent(data.criteria[key].toString());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (data.pageSize) {\r\n\t\t\t\t\t\t\tqs += (qs ? '&' : '') + 'pg=' + data.pageIndex + '&pgsz=' + data.pageSize;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\turl = url + qs + hash;\r\n\t\t\t\t\t\tdata = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trequest(method, url, data, error, resolve, reject);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tfunction info(data) {\r\n\t\t\t\t\tvar info = '';\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\tif (data.length) {info = '(' + data.length + ' items)';}\r\n\t\t\t\t\t\telse if (data.createdItems) {\r\n\t\t\t\t\t\t\tvar parts = [];\r\n\t\t\t\t\t\t\tif (data.createdItems.length) {parts.push(data.createdItems.length + ' created');} \r\n\t\t\t\t\t\t\tif (data.updatedItems.length) {parts.push(data.updatedItems.length + ' updated');}\r\n\t\t\t\t\t\t\tif (data.deletedItems && data.deletedItems.length) {parts.push(data.deletedItems.length + ' deleted');}\r\n\t\t\t\t\t\t\tif (data.deletedIds && data.deletedIds.length) {parts.push(data.deletedIds.length + ' deleted');}\r\n\t\t\t\t\t\t\tif (parts.length) {info = '(' + parts.join(', ') + ')';}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn info;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction request(method, url, data, errorHandler, resolve, reject) {\r\n\t\t\t\t\tvar pre = '';\r\n\t\t\t\t\tfor (var i=0; i<6-method.length; i++) {pre += ' ';}\r\n\t\t\t\t\tlog().log(' -> ' + pre + method + ' ' + url + ' ' + info(data));\r\n\t\t\t\t\t\r\n\t\t\t\t\t$.ajax(url, {\r\n\t\t\t\t\t\tmethod: method,\r\n\t\t\t\t\t\tcontentType: 'application/json',\r\n\t\t\t\t\t\tprocessData: false,\r\n\t\t\t\t\t\tdata: data && JSON.stringify(data),\r\n\t\t\t\t\t\ttimeout: timeout\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.done(function(data, statusText, jqXHR){\r\n\t\t\t\t\t\tif (jqXHR.responseText.indexOf('j_security_check') !== -1) {\r\n\t\t\t\t\t\t\t// login challenge from server, session expired\r\n\t\t\t\t\t\t\tlog().info('401 ' + pre + method + ' ' + url + ' ' + info(data) + ' (LOGIN CHALLENGE)');\r\n\t\t\t\t\t\t\terrorHandler(jqXHR, method, url, data, resolve, reject);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlog().info('200 ' + pre + method + ' ' + url + ' ' + info(data) + ' (OK)');\r\n\t\t\t\t\t\t\tretries = 0;\r\n\t\t\t\t\t\t\tresolve(Persistent.fromJSON(jqXHR.responseText));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.fail(function(jqXHR, textStatus, errorThrown) {\r\n\t\t\t\t\t\tjqXHR.statusText = errorThrown || textStatus; \r\n\t\t\t\t\t\tlog().warn(jqXHR.status + ' ' + pre + method + ' ' + url + ' ' + info(data) + ' (' + jqXHR.statusText + ')');\r\n\t\t\t\t\t\terrorHandler(jqXHR, method, url, data, resolve, reject);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction error(jqXHR, method, url, data, resolve, reject) {\r\n\t\t\t\t\t// status code 5xx ? possibly recoverable.\r\n\t\t\t\t\tvar statusText = jqXHR.statusText;\r\n\t\t\t\t\tswitch(status) {\r\n\t\t\t\t\t\tcase 500: // Internal server error\r\n\t\t\t\t\t\tcase 502: // Bad Gateway\r\n\t\t\t\t\t\tcase 503: // Service unavailable\r\n\t\t\t\t\t\tcase 504: // Gateway Timeout\r\n\t\t\t\t\t\t\tif (retries > 0) {\r\n\t\t\t\t\t\t\t\tretry(jqXHR, method, url, data, errorHandler, resolve, reject);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tcase 200: // Happens in case of server login challenge when unauthorized\r\n\t\t\t\t\t\t\tif (jqXHR.status == 200) {\r\n\t\t\t\t\t\t\t\t// TODO handle this\r\n\t\t\t\t\t\t\t\tstatusText = 'Session expired.';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdefault: // unrecoverable or too many tries. give up \r\n\t\t\t\t\t\t\tretries = 0;\r\n\t\t\t\t\t\t\tvar err = new Error(jqXHR.status + ' ' + statusText);\r\n\t\t\t\t\t\t\terr.status = jqXHR.status;\r\n\t\t\t\t\t\t\terr.statusText = statusText;\r\n\t\t\t\t\t\t\terr.request = jqXHR;\r\n\t\t\t\t\t\t\terr.method = method;\r\n\t\t\t\t\t\t\terr.url = url;\r\n\t\t\t\t\t\t\terr.data = data;\r\n\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction retry(jqXHR, method, url, data, errorHandler, resolve, reject) {\r\n\t\t\t\t\tretries--;\r\n\t\t\t\t\tvar after = 3000; // 5 minutes\r\n\t\t\t\t\tvar retryAfter = jqXHR.getResponseHeader('Retry-After');\r\n\t\t\t\t\tif (retryAfter) {\r\n\t\t\t\t\t\tvar tmp = parseInt(retryAfter, 10);\r\n\t\t\t\t\t\tif (! isNaN(tmp)) {\r\n\t\t\t\t\t\t\tafter = tmp * 1000; // seconds to ms.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\trequest(method, url, data, errorhandler, resolve, reject);\r\n\t\t\t\t\t}, after);\r\n\t\t\t\t}\r\n\t\t\t})(method, url, data, this.cfg.timeout, this.cfg.retryCount, this.cfg.retryWaitTime);\r\n\t\t}\r\n\t});\r\n\r\n\tfunction RestDataStoreFactory(name, url, cfg) {\r\n\t\treturn new RestDataStore(name, url, cfg);\r\n\t}\r\n\t\r\n\tDataStore.registerType('http', RestDataStoreFactory);\r\n\tDataStore.registerType('https', RestDataStoreFactory);\r\n\r\n\treturn RestDataStore;\r\n});\r\n\n","define('bridalapp/named',['bridalapp/class', 'bridalapp/persistent'], function (Class, Persistent) {\r\n\tvar Named = Class('Named', Persistent, {\r\n\t\tinitialize: function Named_initialize($super, obj) {\r\n\t\t\tthis.name = '';\r\n\t\t\t$super(obj);\r\n\t\t},\r\n\t\t\r\n\t\ttoString: function Named_toString() {\r\n\t\t\treturn '[Object ' + this.type + ' \\'' + this.name + '\\' ' + this.id.toString() + ' v' + this.version + ']';\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn Named;\r\n});\r\n\n","define('bridalapp/account',['bridalapp/class', 'bridalapp/persistent', 'bridalapp/named'], function(Class, Persistent, Named){\r\n\tvar Account = Class('Account', Named, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\tthis.roles = []; // may be overwritten in super call\r\n\t\t\tthis.groups = [];\r\n\t\t\tthis.credentials = [];\r\n\t\t\t$super(obj);\r\n\t\t},\r\n\t\t\r\n\t\tis: function Account_is(role) {\r\n\t\t\treturn Persistent.indexOf(this.roles, role) !== -1;\r\n\t\t},\r\n\t\t\r\n\t\tisAny: function accountIsAny(roles) {\r\n\t\t\tfor (var i=0,role; role=roles[i]; i++) {\r\n\t\t\t\tif (this.is(role)) {return true;}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t\r\n\t\tisAll: function Account_isAll(roles) {\r\n\t\t\tfor (var i=0,role; role=roles[i]; i++) {\r\n\t\t\t\tif (!this.is(role)) {return false;}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t});\r\n\r\n\treturn Account;\r\n});\n","define('bridalapp/brand',['bridalapp/class', 'bridalapp/named'], function(Class, Named){\r\n\tvar Brand = Class('Brand', Named, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\r\n\treturn Brand;\r\n});\n","define('bridalapp/synchrequest',['bridalapp/class'], function(Class){\r\n\tvar SynchRequest = Class('SynchRequest', {\r\n\t\tinitialize: function(obj) {\r\n\t\t\tthis.unsynchedDuration = (obj && obj.synchDuration) || 0;\r\n\t\t\tthis.criteria = (obj && obj.criteria) || null;\r\n\t\t\tthis.currentIds = (obj && obj.currentIds) || [];\r\n\t\t\tthis.currentVersions = (obj && obj.currentVersions) || [];\r\n\t\t\tthis.createdItems = (obj && obj.createdItems) || [];\r\n\t\t\tthis.updatedItems = (obj && obj.updatedItems) || [];\r\n\t\t\tthis.deletedItems = (obj && obj.deletedItems) || [];\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn SynchRequest;\r\n});\n","define('bridalapp/synchresponse',['bridalapp/class'], function(Class){\r\n\tvar SynchResponse = Class('SynchResponse', {\r\n\t\tinitialize: function(obj) {\r\n\t\t\tthis.createdItems = (obj && obj.createdItems) || [];\r\n\t\t\tthis.updatedItems = (obj && obj.updatedItems) || [];\r\n\t\t\tthis.staleItems = (obj && obj.staleItems) || [];\r\n\t\t\tthis.failedItems = (obj && obj.failedItems) || [];\r\n\t\t\tthis.deletedIds = (obj && obj.deletedIds) || [];\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn SynchResponse;\r\n});\n","define('bridalapp/syncheddatastore',['bridalapp/class', \r\n\t\t'jquery', \r\n\t\t'bridalapp/log', \r\n\t\t'bridalapp/persistent', \r\n\t\t'bridalapp/datastore', \r\n\t\t'bridalapp/synchabledatastore', \r\n\t\t'bridalapp/synchrequest', \r\n\t\t'bridalapp/synchresponse'], \r\n\r\nfunction (Class, $, log, Persistent, DataStore, SynchableDataStore, SynchRequest, SynchResponse) {\r\n\t'use strict';\r\n\r\n\tvar SynchedDataStore = Class('SynchedDataStore', SynchableDataStore, {\r\n\t\t\r\n\t\tinitialize: function SynchedDataStore_initialize($super, name, url, cfg) {\r\n\t\t\tlog().log('Initializing SynchedDataStore `' + name + '`...');\r\n\t\t\t$super(name, url, cfg);\r\n\t\t\tthis.synching = false;\r\n\t\t\tthis.synchError = false;\r\n\t\t\tcfg = this.cfg;\r\n\t\t\tif (cfg.autoSynch === undefined) {cfg.autoSynch = true;}\r\n\t\t\tif (!cfg.synchInterval) {cfg.synchInterval = 15 * 1000;}    // 15 sec.\r\n\t\t\tif (!cfg.pollInterval) {cfg.pollInterval = 15 * 60 * 1000;} // 15 min.\r\n\t\t\tif (cfg.remoteSynch === undefined) {cfg.remoteSynch = true;}\r\n\t\t\tif ((! cfg.localDataStore) || (! cfg.remoteDataStore)) {\r\n\t\t\t\tvar urls = url.split('://')[1].split('#');\r\n\t\t\t\tif (! cfg.localDataStore) {\r\n\t\t\t\t\tvar localParts=urls[0].split('/'), \r\n\t\t\t\t\t\tlocalType=localParts[0],\r\n\t\t\t\t\t\tlocalRepo=localParts.slice(1, localParts.length-1).join('/'),\r\n\t\t\t\t\t\tlocalStore=localParts[localParts.length-1];\r\n\t\t\t\t\tcfg.localDataStore = DataStore.fromType(name, localType, \r\n\t\t\t\t\t\t\tlocalType + '://' + localRepo + '/' + localStore);\r\n\t\t\t\t\tif (! (cfg.localDataStore instanceof SynchableDataStore)) {\r\n\t\t\t\t\t\tif (cfg.localDataStore) {\r\n\t\t\t\t\t\t\tlog().error('Unable to initialize SynchedDataStore \\'' + name + '\\'.' + \r\n\t\t\t\t\t\t\t\t\t'Need a synchable datastore for the local side, ' + \r\n\t\t\t\t\t\t\t\t\t'but ' + cfg.localDataStore + ' is not a SynchableDataStore.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlog().error('Unable to initialize SynchedDataStore \\'' + name + '\\'.' + \r\n\t\t\t\t\t\t\t\t\t'Need a synchable datastore for the local side, but ' + \r\n\t\t\t\t\t\t\t\t\t'could not find a datastore for url \\'' + urls[0] + '\\'.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (! cfg.remoteDataStore) {\r\n\t\t\t\t\tvar remoteParts=urls[1].split('/'),\r\n\t\t\t\t\t\tremoteType=remoteParts[0],\r\n\t\t\t\t\t\tremoteRepo=remoteParts.slice(1, remoteParts.length-1).join('/'),\r\n\t\t\t\t\t\tremoteStore=remoteParts[remoteParts.length-1];\r\n\t\t\t\t\tcfg.remoteDataStore = DataStore.fromType(name, remoteType, '/' + remoteRepo + '/' + remoteStore);\r\n\t\t\t\t\tif (! cfg.remoteDataStore) {\r\n\t\t\t\t\t\tlog().error('Unable to initialize SynchedDataStore \\'' + name + '\\'.' + \r\n\t\t\t\t\t\t\t\t'Need a datastore for the remote side, but ' + \r\n\t\t\t\t\t\t\t\t'could not find a datastore for url \\'' + urls[1] + '\\'.');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlog().log('Initialized SynchedDataStore `' + name + '`.');\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Brings this datastore back into synch.\r\n\t\t * \r\n\t\t * <p>Returns a promise that resolves on synch complete or rejects on\r\n\t\t * synch failure. The arrays returned by <code>staleItems</code> and \r\n\t\t * <code>failedItems</code> will be updated with items that could not\r\n\t\t * be saved because they had been changed on the remote server in the\r\n\t\t * meantime, or that gave (integrity constraint) validation errors,\r\n\t\t * respectively.</p> \r\n\t\t */\r\n\t\tsynch: function SynchedDataStore_synch($super, force) {\r\n\t\t\tif (this.cfg.autoSynch) {autoSynch(this);}\r\n\t\t\tvar me = this, cfg = me.cfg;\r\n\t\t\tif (me.synching) {return me.synching;}\r\n\t\t\tme.synchError = false;\r\n\t\t\tif (! cfg.remoteDataStore.cfg.supportsSynch) {return poorMansSynch(me);}\r\n\t\t\treturn me.synching = new Promise(function(resolve, reject) {\r\n\t\t\t\t// if not forced synch and store looks synched and poll interval not expired, do nothing.\r\n\t\t\t\tif ((!force) && me.looksSynched() && (Date.now() < me.lastSynched().getTime() + cfg.pollInterval)) {\r\n\t\t\t\t\t// postpone resolving until after synch method has returned.\r\n\t\t\t\t\treturn setTimeout(function(){\r\n\t\t\t\t\t\tme.synching = false;\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t},0);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// synching is needed\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlog().log('Synching SynchedDataStore `' + me.name + '`...');\r\n\t\t\t\t\tme.trigger('synch:started');\r\n\t\t\t\t\tvar changed = false;\r\n\t\t\t\t\tvar req = new SynchRequest();\r\n\t\t\t\t\treq.criteria = cfg.filter || null;\r\n\t\t\t\t\treq.createdItems.push.apply(req.createdItems, me.createdItems());\r\n\t\t\t\t\treq.updatedItems.push.apply(req.updatedItems, me.updatedItems());\r\n\t\t\t\t\treq.deletedItems.push.apply(req.deletedItems, me.deletedItems());\r\n\t\t\t\t\treq.currentIds.push.apply(req.currentIds, Persistent.pluck(me.items(), 'id'));\r\n\t\t\t\t\treq.currentVersions.push.apply(req.currentVersions, Persistent.pluck(me.items(), 'version'));\r\n\t\r\n\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` synching with remote datastore ' + cfg.remoteDataStore + '...');\r\n\t\t\t\t\tcfg.remoteDataStore.synch(req).then(function(response) {\r\n\t\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` synched with remote datastore. Processing response ' + response + '...');\r\n\r\n\t\t\t\t\t\tvar i,id,idx,item;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// handle deleted items\r\n\t\t\t\t\t\tif (response.deletedIds.length) {\r\n\t\t\t\t\t\t\tfor (i=0; id=response.deletedIds[i]; i++) {\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.items(), id);\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {\r\n\t\t\t\t\t\t\t\t\tme.items().splice(idx, 1);\r\n\t\t\t\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.deletedItems(), id);\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {me.deletedItems().splice(idx, 1);}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlog().log('Processed ' + response.deletedIds.length + ' deleted items.');\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// handle updated items\r\n\t\t\t\t\t\tif (response.updatedItems.length) {\r\n\t\t\t\t\t\t\tfor (i=0; item=response.updatedItems[i]; i++) {\r\n\t\t\t\t\t\t\t\t// if we have futureItems, try to merge the changes into the new version of the item\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.futureItems(), item)\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {\r\n\t\t\t\t\t\t\t\t\t// get future item and remove from list\r\n\t\t\t\t\t\t\t\t\tvar future = me.futureItems().splice(idx, 1)[0];\r\n\t\t\t\t\t\t\t\t\t// replace updated item with version from server\r\n\t\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), item);\r\n\t\t\t\t\t\t\t\t\tif (idx !== -1) {me.updatedItems().splice(idx, 1, item);}\r\n\t\t\t\t\t\t\t\t\telse {me.updatedItems().push(item);}\r\n\t\t\t\t\t\t\t\t\t// now merge changes from future item onto server item\r\n\t\t\t\t\t\t\t\t\tvar merged = Persistent.clone(item);\r\n\t\t\t\t\t\t\t\t\tfor (var key in future) {\r\n\t\t\t\t\t\t\t\t\t\tif (key !== 'version') {\r\n\t\t\t\t\t\t\t\t\t\t\tmerged[key] = future[key]; \r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// replace item with the merged version\r\n\t\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.items(), item);\r\n\t\t\t\t\t\t\t\t\tif (idx !== -1) {\r\n\t\t\t\t\t\t\t\t\t\tme.items().splice(idx, 1, merged);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// remove saved item from the updatedItems list\r\n\t\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), item);\r\n\t\t\t\t\t\t\t\t\tif (idx !== -1) {me.updatedItems().splice(idx, 1);}\r\n\t\t\t\t\t\t\t\t\telse {changed = true;}\r\n\t\t\t\t\t\t\t\t\t// replace item with the saved version\r\n\t\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.items(), item);\r\n\t\t\t\t\t\t\t\t\tif (idx !== -1) {me.items().splice(idx, 1, item);}\r\n\t\t\t\t\t\t\t\t\telse {me.items().push(item);}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (response.updatedItems.length) {\r\n\t\t\t\t\t\t\t\tlog().log('Processed ' + response.updatedItems.length + ' updated items.');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// handle created items\r\n\t\t\t\t\t\tif (response.createdItems.length) {\r\n\t\t\t\t\t\t\tfor (i=0; item=response.createdItems[i]; i++) {\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.items(), item);\r\n\t\t\t\t\t\t\t\tif (idx === -1) {\r\n\t\t\t\t\t\t\t\t\tme.items().push(item);\r\n\t\t\t\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {me.items().splice(idx, 1, item);}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlog().log('Processed ' + response.createdItems.length + ' created items.');\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// handle stale items\r\n\t\t\t\t\t\tif (response.staleItems.length) {\r\n\t\t\t\t\t\t\tfor (i=0; item=response.staleItems[i]; i++) {\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.staleItems(), item);\r\n\t\t\t\t\t\t\t\tif (idx === -1) {me.staleItems().push(item);}\r\n\t\t\t\t\t\t\t\telse {me.staleItems().splice(idx, 1, item);}\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.createdItems(), item);\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {me.createdItems().splice(idx, 1);}\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), item);\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {me.updatedItems().splice(idx, 1);}\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.deletedItems(), item);\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {me.deletedItems().splice(idx, 1);}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlog().log('Processed ' + response.staleItems.length + ' stale items.');\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif (response.failedItems.length) {\r\n\t\t\t\t\t\t\t// handle failed items\r\n\t\t\t\t\t\t\tfor (i=0; item=response.failedItems[i]; i++) {\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.failedItems(), item);\r\n\t\t\t\t\t\t\t\tif (idx === -1) {me.failedItems().push(item);}\r\n\t\t\t\t\t\t\t\telse {me.failedItems().splice(idx, 1, item);}\r\n\t\t\t\t\t\t\t\tif (Persistent.indexOf(me.createdItems(), item) !== -1) {\r\n\t\t\t\t\t\t\t\t\t// created items is a virtual array, remove from items\r\n\t\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.items(), item);\r\n\t\t\t\t\t\t\t\t\tif (idx !== -1) {me.items().splice(idx, 1);}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), item);\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {me.updatedItems().splice(idx, 1);}\r\n\t\t\t\t\t\t\t\tidx = Persistent.indexOf(me.deletedItems(), item);\r\n\t\t\t\t\t\t\t\tif (idx !== -1) {me.deletedItems().splice(idx, 1);}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlog().log('Processed ' + response.failedItems.length + ' failed items.');\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tme.lastSynched(new Date());\r\n\t\t\t\t\t\tme.synching = false;\r\n\t\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` synched.');\r\n\t\t\t\t\t\tif (changed) {\r\n\t\t\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` changed. Triggering change...');\r\n\t\t\t\t\t\t\tme.trigger('change');\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` triggering success....');\r\n\t\t\t\t\t\tme.trigger('synch:success');\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` triggering done....');\r\n\t\t\t\t\t\tme.trigger('synch:done');\r\n\t\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` synch done.');\r\n\t\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` synch error:' + e);\r\n\t\t\t\t\t\tme.synching = false;\r\n\t\t\t\t\t\tme.synchError = e;\r\n\t\t\t\t\t\tme.trigger('synch:failed');\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\tme.trigger('synch:done');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e) {\r\n\t\t\t\t\tlog().log('SynchedDataStore `' + me.name + '` synch error:' + e);\r\n\t\t\t\t\tme.synching = false;\r\n\t\t\t\t\tme.synchError = e;\r\n\t\t\t\t\tme.trigger('synch:failed');\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t\tme.trigger('synch:done');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/** Indicates whether this datastore is currently busy synching. */\r\n\t\tisSynching: function SynchedDataStore_isSynching() {\r\n\t\t\treturn !!this.synching;\r\n\t\t},\r\n\r\n\t\t// IMPLEMENT ALL ABSTRACT METHODS.\r\n\t\t// ASYNCH methods will call synch to try to make sure after the call the results\r\n\t\t// are consistent for both the local as well as the remote datastore.\r\n\t\tload: function SynchedDataStore_load(criteria, pageSize, pageIndex) {\r\n\t\t\tvar me = this;\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tthis.synch().then(function(){\r\n\t\t\t\t\tme.cfg.localDataStore.load(criteria, pageSize, pageIndex).then(function(items){\r\n\t\t\t\t\t\tresolve(items);\r\n\t\t\t\t\t});\r\n\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t});\r\n\t\t\t}); \r\n\t\t},\r\n\r\n\t\tcount: function SynchedDataStore_count(criteria) {\r\n\t\t\tvar me = this;\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tthis.synch().then(function(){\r\n\t\t\t\t\tme.cfg.localDataStore.count(criteria, pageSize, pageIndex).then(function(count){\r\n\t\t\t\t\t\tresolve(count);\r\n\t\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t});\r\n\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t});\r\n\t\t\t}); \r\n\t\t},\r\n\r\n\t\tsave: function SynchedDataStore_save(item) {\r\n\t\t\tvar me = this;\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tme.cfg.localDataStore.save(item).then(function(items){\r\n\t\t\t\t\tme.synch().then(function(){\r\n\t\t\t\t\t\tresolve(items);\r\n\t\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t});\r\n\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t});\r\n\t\t\t}); \r\n\t\t},\r\n\r\n\t\tdelete: function SynchedDataStore_delete(item) {\r\n\t\t\tvar me = this;\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tme.cfg.localDataStore.delete(item).then(function(items){\r\n\t\t\t\t\tme.synch().then(function(){\r\n\t\t\t\t\t\tresolve(items);\r\n\t\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t});\r\n\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t});\r\n\t\t\t}); \r\n\t\t},\r\n\t\t\r\n\t\t// synchronous methods will interact with the local datastore only (remote does not support synchronous invocation)\r\n\t\t/** Gets or sets the (local/device) date time this datastore was last synched. */\r\n\t\tlastSynched: function SynchedDataStore_lastSynched(newDate) {\r\n\t\t\treturn this.cfg.localDataStore.lastSynched(newDate);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Returns an 'immutable' array that represents a live view of the items\r\n\t\t * maintained in this store. \r\n\t\t * \r\n\t\t * <p>The result of this method can be used for observing/monitoring the\r\n\t\t * data set. DO NOT MUTATE THIS ARRAY!.</p>\r\n\t\t */\r\n\t\titems: function SynchedDataStore_items() {\r\n\t\t\treturn this.cfg.localDataStore.items();\r\n\t\t},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that have been added to the store since the last synch. */\r\n\t\tcreatedItems: function SynchedDataStore_createdItems() {\r\n\t\t\treturn this.cfg.localDataStore.createdItems();\r\n\t\t},\r\n\t\t\r\n\t\t/** 'Immutable' array of the original versions of items that have been updated since the last synch. */\r\n\t\tupdatedItems: function SynchedDataStore_updatedItems() {\r\n\t\t\treturn this.cfg.localDataStore.updatedItems();\r\n\t\t},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that have been deleted since the last synch. */\r\n\t\tdeletedItems: function SynchedDataStore_deletedItems() {\r\n\t\t\treturn this.cfg.localDataStore.deletedItems();\r\n\t\t},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that could not be saved during the last synch because they went stale. */\r\n\t\tstaleItems: function SynchedDataStore_staleItems() {\r\n\t\t\treturn this.cfg.localDataStore.staleItems();\r\n\t\t},\r\n\t\t\r\n\t\t/** 'Immutable' array of items that could not be saved during the last synch because they had errors. */\r\n\t\tfailedItems: function SynchedDataStore_failedItems() {\r\n\t\t\treturn this.cfg.localDataStore.failedItems();\r\n\t\t},\r\n\t\t\r\n\t\t/** \r\n\t\t * 'Immutable' array of items that were already updated when a synch started and were then updated again while synch was in progress.\r\n\t\t *  These items are effectively stale, but because the user edited his own items, we can safely assume\r\n\t\t *  he wishes to overwrite the remote version with the item that is in this list.\r\n\t\t */\r\n\t\tfutureItems: function SynchedDataStore_futureItems() {\r\n\t\t\treturn this.cfg.localDataStore.futureItems();\r\n\t\t},\r\n\t\t\r\n\t\t/** \r\n\t\t * Synchronous equivalent of <code>save</code>.\r\n\t\t * \r\n\t\t * <p>The arrays returned by <code>updatedItems</code>, <code>createdItems</code>\r\n\t\t * and <code>removedItems</code> will be updated to reflect the changes made\r\n\t\t * to the datastore since the last synch.</p>\r\n\t\t */\r\n\t\tset: function SynchedDataStore_set(item) {\r\n\t\t\treturn this.cfg.localDataStore.set(item);\r\n\t\t},\r\n\t\t\r\n\t\t/**\r\n\t\t * Synchronous equivalent of <code>delete</code>.\r\n\t\t *  \r\n\t\t * <p>The arrays returned by <code>updatedItems</code>, <code>createdItems</code>\r\n\t\t * and <code>removedItems</code> will be updated to reflect the changes made\r\n\t\t * to the datastore since the last synch.</p>\r\n\t\t */\r\n\t\tdel: function SynchedDataStore_del(item) {\r\n\t\t\treturn this.cfg.localDataStore.del(item);\r\n\t\t}\r\n\t});\r\n\r\n\tDataStore.registerType('synched', function SynchedDataStoreFactory(name, url, cfg) {\r\n\t\treturn new SynchedDataStore(name, url, cfg);\r\n\t});\r\n\t\r\n\tfunction handleLoadedItems(me, items) {\r\n\t\tvar item, old, idx, changed=false;\r\n\t\t// all items we got from the remote should be added if we did not have them on local,\r\n\t\t// or updated locally if the version we got from the remote was different. only the \r\n\t\t// remote updates the version, so it being different means our version is older.\r\n\t\tfor (var i=0; item=items[i]; i++) {\r\n\t\t\tidx = Persistent.indexOf(me.items(), item); \r\n\t\t\tif (idx === -1) {\r\n\t\t\t\t// item is not in local. either it's new on remote, or was deleted on local\r\n\t\t\t\tidx = Persistent.indexOf(me.deletedItems(), item);\r\n\t\t\t\tif (idx !== -1) {\r\n\t\t\t\t\t// item was deleted on local. check version\r\n\t\t\t\t\tif (item.version !== me.deletedItems()[idx].version) {\r\n\t\t\t\t\t\t// item was deleted locally, but edited on server, so our deleted\r\n\t\t\t\t\t\t// version becomes stale, but as we deleted it we don't care and\r\n\t\t\t\t\t\t// don't add it to stale. We just remove it from deletedItems.\r\n\t\t\t\t\t\tme.deletedItems().splice(idx, 1);\r\n\t\t\t\t\t\t// add the new version of the item we had deleted\r\n\t\t\t\t\t\tme.items().push(item);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// item is new on remote\r\n\t\t\t\t\tme.items().push(item);\r\n\t\t\t\t}\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// item is already in local. check version\r\n\t\t\t\tif (item.version !== me.items()[idx].version) {\r\n\t\t\t\t\t// local version is older than remote version. replace\r\n\t\t\t\t\told = me.items().splice(idx, 1, item)[0]; \r\n\t\t\t\t\t// if we had updated this item, the update went stale\r\n\t\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), old); \r\n\t\t\t\t\tif (idx !== -1){\r\n\t\t\t\t\t\t// changed item was updated, so went stale\r\n\t\t\t\t\t\tme.updatedItems().splice(idx, 1);\r\n\t\t\t\t\t\tidx = Persistent.indexOf(me.staleItems(), old); \r\n\t\t\t\t\t\tif (idx === -1) {me.staleItems().push(old);}\r\n\t\t\t\t\t\telse {me.staleItems().splice(idx, 1, old);}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// all items we did NOT get from the remote should be removed locally, \r\n\t\t// except for newly created ones\r\n\t\tfor (var i=me.items().length-1; i>=0; i--) {\r\n\t\t\titem = me.items()[i];\r\n\t\t\tif ((Persistent.indexOf(items, item) === -1) &&\r\n\t\t\t\t(Persistent.indexOf(me.createdItems(), item) === -1)){ \r\n\t\t\t\t// item is not new, but does not exist (any more) on the remote\r\n\t\t\t\tvar old = me.items().splice(i, 1)[0];\r\n\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), old);\r\n\t\t\t\tif (idx !== -1) { \r\n\t\t\t\t\t// removed item was updated locally, so went stale\r\n\t\t\t\t\tthis.updatedItems().splice(idx, 1);\r\n\t\t\t\t\tidx = Persistent.indexOf(me.staleItems(), old); \r\n\t\t\t\t\tif (staleIdx === -1) {me.staleItems().push(old);}\r\n\t\t\t\t\telse {me.staleItems().splice(idx, 1, old);}\r\n\t\t\t\t}\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (changed) {me.trigger('change');}\r\n\t}\r\n\r\n\tfunction handleSavedItems(me, items) {\r\n\t\tfor (var i=0,item; item=items[i]; i++) {\r\n\t\t\t// if we have futureItems, try to merge the changes into the new version of the item\r\n\t\t\tvar idx = Persistent.indexOf(me.futureItems(), item)\r\n\t\t\tif (idx !== -1) {\r\n\t\t\t\tvar future = me.futureItems().splice(idx, 1)[0];\r\n\t\t\t\t// replace updatedItems with version from server\r\n\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), item);\r\n\t\t\t\tif (idx !== -1) {me.updatedItems().splice(idx, 1, item);}\r\n\t\t\t\telse {me.updatedItems().push(item);}\r\n\t\t\t\t// now merge changes from future item onto server item\r\n\t\t\t\tvar merged = Persistent.clone(item);\r\n\t\t\t\tfor (var key in future) {\r\n\t\t\t\t\tif (key !== 'version') {\r\n\t\t\t\t\t\tmerged[key] = future[key]; \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// replace items with the merged version\r\n\t\t\t\tidx = Persistent.indexOf(me.items(), item);\r\n\t\t\t\tif (idx !== -1) {me.items().splice(idx, 1, merged);}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// remove saved item from the updatedItems list\r\n\t\t\t\tidx = Persistent.indexOf(me.updatedItems(), item);\r\n\t\t\t\tif (idx !== -1) {me.updatedItems().splice(idx, 1);}\r\n\t\t\t\t// replace items with the saved version\r\n\t\t\t\tidx = Persistent.indexOf(me.items(), item);\r\n\t\t\t\tif (idx !== -1) {me.items().splice(idx, 1, item);}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleDeletedItems(me, items) {\r\n\t\tfor (var i=0,item; item=items[i]; i++) {\r\n\t\t\tvar idx = Persistent.indexOf(me.deletedItems(), item);\r\n\t\t\tif (idx !== -1) {me.deletedItems().splice(idx, 1);}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction poorMansSynch(me) {\r\n\t\tvar cfg = me.cfg;\r\n\t\treturn me.synching = new Promise(function(resolve, reject) {\r\n\t\t\t// if store looks synched and poll interval not expired, do nothing.\r\n\t\t\tif (me.looksSynched() && (Date.now() < me.lastSynched().getTime() + cfg.pollInterval)) {\r\n\t\t\t\t// postpone resolving until after synch method has returned.\r\n\t\t\t\treturn setTimeout(function(){\r\n\t\t\t\t\tme.synching = false;\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t},0);\r\n\t\t\t}\r\n\t\t\t// synching is needed\r\n\t\t\tme.trigger('synch:started');\r\n\t\t\tcfg.remoteDataStore.load().then(function(items) {\r\n\t\t\t\t// handle loaded items, save dirty items and delete removed items\r\n\t\t\t\thandleLoadedItems(me, items);\r\n\t\t\t\t// now that we processed all loaded items we can save our changes.\r\n\t\t\t\t// Make a snapshot of current state: dirty and deleted items.\r\n\t\t\t\tvar dirty = me.createdItems().concat();\r\n\t\t\t\tfor (var i=0,item; item=me.updatedItems()[i]; i++) {\r\n\t\t\t\t\t// The items in updated are the old versions, so get the corresponding new version\r\n\t\t\t\t\tvar idx = Persistent.indexOf(me.items(), item);\r\n\t\t\t\t\tif (idx !== -1) {dirty.push(me.items()[idx]);}\r\n\t\t\t\t}\r\n\t\t\t\tvar deleted = me.deletedItems().concat();\r\n\t\t\t\t// delete items first\r\n\t\t\t\tnew Promise(function(resolve, reject){\r\n\t\t\t\t\tif (! deleted.length) {resolve(); return;}\r\n\t\t\t\t\tcfg.remoteDataStore.delete(deleted).then(function(items){\r\n\t\t\t\t\t\thandleDeletedItems(me, items);\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t});\r\n\t\t\t\t}).then(function(){\r\n\t\t\t\t\t// items are deleted, now we can create new, or update\r\n\t\t\t\t\tnew Promise(function(resolve, reject){\r\n\t\t\t\t\t\tif (! dirty.length) {resolve(); return;}\r\n\t\t\t\t\t\tcfg.remoteDataStore.save(dirty).then(function(items){\r\n\t\t\t\t\t\t\thandleSavedItems(me, items);\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}).then(function(){\r\n\t\t\t\t\t\tme.lastSynched(new Date());\r\n\t\t\t\t\t\tme.synching = false;\r\n\t\t\t\t\t\tme.synchError = false;\r\n\t\t\t\t\t\tme.trigger('synch:success');\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\tme.trigger('synch:done');\r\n\t\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t});\r\n\t\t\t\t}).catch(function(e){\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t});\r\n\t\t\t}).catch(function(e) {\r\n\t\t\t\t// load failed\r\n\t\t\t\tme.synching = false;\r\n\t\t\t\tme.synchError = e;\r\n\t\t\t\tme.trigger('synch:failed');\r\n\t\t\t\treject(e);\r\n\t\t\t\tme.trigger('synch:done');\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tfunction autoSynch(me) {\r\n\t\tif (! me.autoSynchActive) {\r\n\t\t\tme.autoSynchActive = true;\r\n\t\t\tsetInterval(function(){\r\n\t\t\t\tme.synch();\r\n\t\t\t}, me.cfg.synchInterval);\r\n\t\t}\r\n\t}\r\n\r\n\treturn SynchedDataStore;\r\n});\r\n\n","define('bridalapp/brands',['bridalapp/class', \r\n\t\t'bridalapp/syncheddatastore',\r\n\t\t'bridalapp/localdatastore', \r\n\t\t'bridalapp/restdatastore',\r\n],\r\nfunction (Class, SynchedDataStore) {\r\n\tvar Brands = Class('Brands', SynchedDataStore, {\r\n\t\tinitialize: function Brands_initialize($super) {\r\n\t\t\t$super('brands', 'synched://local/bridal-app/brands#http/api/brands');\r\n\t\t}\r\n\t});\r\n\r\n\treturn new Brands();\r\n});\r\n\n","define('bridalapp/category',['bridalapp/class', 'bridalapp/named'], function(Class, Named){\r\n\tvar Category = Class('Category', Named, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\r\n\treturn Category;\r\n});\n","define('bridalapp/country',['bridalapp/class'], function(Class){\r\n\tvar Country = Class('Country', {\r\n\t\tinitialize: function(name, code) {\r\n\t\t\tif (typeof name === 'object') {\r\n\t\t\t\tcode = name.code;\r\n\t\t\t\tname = name.name;\r\n\t\t\t}\r\n\t\t\tthis.name = name;\r\n\t\t\tthis.code = code;\r\n\t\t}\r\n\t});\r\n\r\n\treturn Country;\r\n});\n","define('bridalapp/countries',['bridalapp/class', 'bridalapp/country'], function(Class, Country){\r\n\tvar Countries = Class('Countries', {\r\n\t\t\r\n\t\tinitialize: function() {\r\n\t\t\tthis.items = [];\r\n\t\t\tvar countries = [\r\n\t\t\t\t['AF', 'Afghanistan'],\r\n\t\t\t\t['AX', 'Åland Islands'],\r\n\t\t\t\t['AL', 'Albania'],\r\n\t\t\t\t['DZ', 'Algeria'],\r\n\t\t\t\t['AS', 'American Samoa'],\r\n\t\t\t\t['AD', 'Andorra'],\r\n\t\t\t\t['AO', 'Angola'],\r\n\t\t\t\t['AI', 'Anguilla'],\r\n\t\t\t\t['AQ', 'Antarctica'],\r\n\t\t\t\t['AG', 'Antigua and Barbuda'],\r\n\t\t\t\t['AR', 'Argentina'],\r\n\t\t\t\t['AM', 'Armenia'],\r\n\t\t\t\t['AW', 'Aruba'],\r\n\t\t\t\t['AU', 'Australia'],\r\n\t\t\t\t['AT', 'Austria'],\r\n\t\t\t\t['AZ', 'Azerbaijan'],\r\n\t\t\t\t['BS', 'Bahamas'],\r\n\t\t\t\t['BH', 'Bahrain'],\r\n\t\t\t\t['BD', 'Bangladesh'],\r\n\t\t\t\t['BB', 'Barbados'],\r\n\t\t\t\t['BY', 'Belarus'],\r\n\t\t\t\t['BE', 'Belgium'],\r\n\t\t\t\t['BZ', 'Belize'],\r\n\t\t\t\t['BJ', 'Benin'],\r\n\t\t\t\t['BM', 'Bermuda'],\r\n\t\t\t\t['BT', 'Bhutan'],\r\n\t\t\t\t['BO', 'Bolivia (Plurinational State of)'],\r\n\t\t\t\t['BQ', 'Bonaire, Sint Eustatius and Saba'],\r\n\t\t\t\t['BA', 'Bosnia and Herzegovina'],\r\n\t\t\t\t['BW', 'Botswana'],\r\n\t\t\t\t['BV', 'Bouvet Island'],\r\n\t\t\t\t['BR', 'Brazil'],\r\n\t\t\t\t['IO', 'British Indian Ocean Territory'],\r\n\t\t\t\t['BN', 'Brunei Darussalam'],\r\n\t\t\t\t['BG', 'Bulgaria'],\r\n\t\t\t\t['BF', 'Burkina Faso'],\r\n\t\t\t\t['BI', 'Burundi'],\r\n\t\t\t\t['KH', 'Cambodia'],\r\n\t\t\t\t['CM', 'Cameroon'],\r\n\t\t\t\t['CA', 'Canada'],\r\n\t\t\t\t['CV', 'Cabo Verde'],\r\n\t\t\t\t['KY', 'Cayman Islands'],\r\n\t\t\t\t['CF', 'Central African Republic'],\r\n\t\t\t\t['TD', 'Chad'],\r\n\t\t\t\t['CL', 'Chile'],\r\n\t\t\t\t['CN', 'China'],\r\n\t\t\t\t['CX', 'Christmas Island'],\r\n\t\t\t\t['CC', 'Cocos (Keeling) Islands'],\r\n\t\t\t\t['CO', 'Colombia'],\r\n\t\t\t\t['KM', 'Comoros'],\r\n\t\t\t\t['CG', 'Congo'],\r\n\t\t\t\t['CD', 'Congo (Democratic Republic of the)'],\r\n\t\t\t\t['CK', 'Cook Islands'],\r\n\t\t\t\t['CR', 'Costa Rica'],\r\n\t\t\t\t['CI', 'Côte d`Ivoire'],\r\n\t\t\t\t['HR', 'Croatia'],\r\n\t\t\t\t['CU', 'Cuba'],\r\n\t\t\t\t['CW', 'Curaçao'],\r\n\t\t\t\t['CY', 'Cyprus'],\r\n\t\t\t\t['CZ', 'Czech Republic'],\r\n\t\t\t\t['DK', 'Denmark'],\r\n\t\t\t\t['DJ', 'Djibouti'],\r\n\t\t\t\t['DM', 'Dominica'],\r\n\t\t\t\t['DO', 'Dominican Republic'],\r\n\t\t\t\t['EC', 'Ecuador'],\r\n\t\t\t\t['EG', 'Egypt'],\r\n\t\t\t\t['SV', 'El Salvador'],\r\n\t\t\t\t['GQ', 'Equatorial Guinea'],\r\n\t\t\t\t['ER', 'Eritrea'],\r\n\t\t\t\t['EE', 'Estonia'],\r\n\t\t\t\t['ET', 'Ethiopia'],\r\n\t\t\t\t['FK', 'Falkland Islands (Malvinas)'],\r\n\t\t\t\t['FO', 'Faroe Islands'],\r\n\t\t\t\t['FJ', 'Fiji'],\r\n\t\t\t\t['FI', 'Finland'],\r\n\t\t\t\t['FR', 'France'],\r\n\t\t\t\t['GF', 'French Guiana'],\r\n\t\t\t\t['PF', 'French Polynesia'],\r\n\t\t\t\t['TF', 'French Southern Territories'],\r\n\t\t\t\t['GA', 'Gabon'],\r\n\t\t\t\t['GM', 'Gambia'],\r\n\t\t\t\t['GE', 'Georgia'],\r\n\t\t\t\t['DE', 'Germany'],\r\n\t\t\t\t['GH', 'Ghana'],\r\n\t\t\t\t['GI', 'Gibraltar'],\r\n\t\t\t\t['GR', 'Greece'],\r\n\t\t\t\t['GL', 'Greenland'],\r\n\t\t\t\t['GD', 'Grenada'],\r\n\t\t\t\t['GP', 'Guadeloupe'],\r\n\t\t\t\t['GU', 'Guam'],\r\n\t\t\t\t['GT', 'Guatemala'],\r\n\t\t\t\t['GG', 'Guernsey'],\r\n\t\t\t\t['GN', 'Guinea'],\r\n\t\t\t\t['GW', 'Guinea-Bissau'],\r\n\t\t\t\t['GY', 'Guyana'],\r\n\t\t\t\t['HT', 'Haiti'],\r\n\t\t\t\t['HM', 'Heard Island and McDonald Islands'],\r\n\t\t\t\t['VA', 'Holy See'],\r\n\t\t\t\t['HN', 'Honduras'],\r\n\t\t\t\t['HK', 'Hong Kong'],\r\n\t\t\t\t['HU', 'Hungary'],\r\n\t\t\t\t['IS', 'Iceland'],\r\n\t\t\t\t['IN', 'India'],\r\n\t\t\t\t['ID', 'Indonesia'],\r\n\t\t\t\t['IR', 'Iran (Islamic Republic of)'],\r\n\t\t\t\t['IQ', 'Iraq'],\r\n\t\t\t\t['IE', 'Ireland'],\r\n\t\t\t\t['IM', 'Isle of Man'],\r\n\t\t\t\t['IL', 'Israel'],\r\n\t\t\t\t['IT', 'Italy'],\r\n\t\t\t\t['JM', 'Jamaica'],\r\n\t\t\t\t['JP', 'Japan'],\r\n\t\t\t\t['JE', 'Jersey'],\r\n\t\t\t\t['JO', 'Jordan'],\r\n\t\t\t\t['KZ', 'Kazakhstan'],\r\n\t\t\t\t['KE', 'Kenya'],\r\n\t\t\t\t['KI', 'Kiribati'],\r\n\t\t\t\t['KP', 'Korea (Democratic People`s Republic of)'],\r\n\t\t\t\t['KR', 'Korea (Republic of)'],\r\n\t\t\t\t['KW', 'Kuwait'],\r\n\t\t\t\t['KG', 'Kyrgyzstan'],\r\n\t\t\t\t['LA', 'Lao People`s Democratic Republic'],\r\n\t\t\t\t['LV', 'Latvia'],\r\n\t\t\t\t['LB', 'Lebanon'],\r\n\t\t\t\t['LS', 'Lesotho'],\r\n\t\t\t\t['LR', 'Liberia'],\r\n\t\t\t\t['LY', 'Libya'],\r\n\t\t\t\t['LI', 'Liechtenstein'],\r\n\t\t\t\t['LT', 'Lithuania'],\r\n\t\t\t\t['LU', 'Luxembourg'],\r\n\t\t\t\t['MO', 'Macao'],\r\n\t\t\t\t['MK', 'Macedonia (the former Yugoslav Republic of)'],\r\n\t\t\t\t['MG', 'Madagascar'],\r\n\t\t\t\t['MW', 'Malawi'],\r\n\t\t\t\t['MY', 'Malaysia'],\r\n\t\t\t\t['MV', 'Maldives'],\r\n\t\t\t\t['ML', 'Mali'],\r\n\t\t\t\t['MT', 'Malta'],\r\n\t\t\t\t['MH', 'Marshall Islands'],\r\n\t\t\t\t['MQ', 'Martinique'],\r\n\t\t\t\t['MR', 'Mauritania'],\r\n\t\t\t\t['MU', 'Mauritius'],\r\n\t\t\t\t['YT', 'Mayotte'],\r\n\t\t\t\t['MX', 'Mexico'],\r\n\t\t\t\t['FM', 'Micronesia (Federated States of)'],\r\n\t\t\t\t['MD', 'Moldova (Republic of)'],\r\n\t\t\t\t['MC', 'Monaco'],\r\n\t\t\t\t['MN', 'Mongolia'],\r\n\t\t\t\t['ME', 'Montenegro'],\r\n\t\t\t\t['MS', 'Montserrat'],\r\n\t\t\t\t['MA', 'Morocco'],\r\n\t\t\t\t['MZ', 'Mozambique'],\r\n\t\t\t\t['MM', 'Myanmar'],\r\n\t\t\t\t['NA', 'Namibia'],\r\n\t\t\t\t['NR', 'Nauru'],\r\n\t\t\t\t['NP', 'Nepal'],\r\n\t\t\t\t['NL', 'Netherlands'],\r\n\t\t\t\t['NC', 'New Caledonia'],\r\n\t\t\t\t['NZ', 'New Zealand'],\r\n\t\t\t\t['NI', 'Nicaragua'],\r\n\t\t\t\t['NE', 'Niger'],\r\n\t\t\t\t['NG', 'Nigeria'],\r\n\t\t\t\t['NU', 'Niue'],\r\n\t\t\t\t['NF', 'Norfolk Island'],\r\n\t\t\t\t['MP', 'Northern Mariana Islands'],\r\n\t\t\t\t['NO', 'Norway'],\r\n\t\t\t\t['OM', 'Oman'],\r\n\t\t\t\t['PK', 'Pakistan'],\r\n\t\t\t\t['PW', 'Palau'],\r\n\t\t\t\t['PS', 'Palestine, State of'],\r\n\t\t\t\t['PA', 'Panama'],\r\n\t\t\t\t['PG', 'Papua New Guinea'],\r\n\t\t\t\t['PY', 'Paraguay'],\r\n\t\t\t\t['PE', 'Peru'],\r\n\t\t\t\t['PH', 'Philippines'],\r\n\t\t\t\t['PN', 'Pitcairn'],\r\n\t\t\t\t['PL', 'Poland'],\r\n\t\t\t\t['PT', 'Portugal'],\r\n\t\t\t\t['PR', 'Puerto Rico'],\r\n\t\t\t\t['QA', 'Qatar'],\r\n\t\t\t\t['RE', 'Réunion'],\r\n\t\t\t\t['RO', 'Romania'],\r\n\t\t\t\t['RU', 'Russian Federation'],\r\n\t\t\t\t['RW', 'Rwanda'],\r\n\t\t\t\t['BL', 'Saint Barthélemy'],\r\n\t\t\t\t['SH', 'Saint Helena, Ascension and Tristan da Cunha'],\r\n\t\t\t\t['KN', 'Saint Kitts and Nevis'],\r\n\t\t\t\t['LC', 'Saint Lucia'],\r\n\t\t\t\t['MF', 'Saint Martin (French part)'],\r\n\t\t\t\t['PM', 'Saint Pierre and Miquelon'],\r\n\t\t\t\t['VC', 'Saint Vincent and the Grenadines'],\r\n\t\t\t\t['WS', 'Samoa'],\r\n\t\t\t\t['SM', 'San Marino'],\r\n\t\t\t\t['ST', 'Sao Tome and Principe'],\r\n\t\t\t\t['SA', 'Saudi Arabia'],\r\n\t\t\t\t['SN', 'Senegal'],\r\n\t\t\t\t['RS', 'Serbia'],\r\n\t\t\t\t['SC', 'Seychelles'],\r\n\t\t\t\t['SL', 'Sierra Leone'],\r\n\t\t\t\t['SG', 'Singapore'],\r\n\t\t\t\t['SX', 'Sint Maarten (Dutch part)'],\r\n\t\t\t\t['SK', 'Slovakia'],\r\n\t\t\t\t['SI', 'Slovenia'],\r\n\t\t\t\t['SB', 'Solomon Islands'],\r\n\t\t\t\t['SO', 'Somalia'],\r\n\t\t\t\t['ZA', 'South Africa'],\r\n\t\t\t\t['GS', 'South Georgia and the South Sandwich Islands'],\r\n\t\t\t\t['SS', 'South Sudan'],\r\n\t\t\t\t['ES', 'Spain'],\r\n\t\t\t\t['LK', 'Sri Lanka'],\r\n\t\t\t\t['SD', 'Sudan'],\r\n\t\t\t\t['SR', 'Suriname'],\r\n\t\t\t\t['SJ', 'Svalbard and Jan Mayen'],\r\n\t\t\t\t['SZ', 'Swaziland'],\r\n\t\t\t\t['SE', 'Sweden'],\r\n\t\t\t\t['CH', 'Switzerland'],\r\n\t\t\t\t['SY', 'Syrian Arab Republic'],\r\n\t\t\t\t['TW', 'Taiwan, Province of China'],\r\n\t\t\t\t['TJ', 'Tajikistan'],\r\n\t\t\t\t['TZ', 'Tanzania, United Republic of'],\r\n\t\t\t\t['TH', 'Thailand'],\r\n\t\t\t\t['TL', 'Timor-Leste'],\r\n\t\t\t\t['TG', 'Togo'],\r\n\t\t\t\t['TK', 'Tokelau'],\r\n\t\t\t\t['TO', 'Tonga'],\r\n\t\t\t\t['TT', 'Trinidad and Tobago'],\r\n\t\t\t\t['TN', 'Tunisia'],\r\n\t\t\t\t['TR', 'Turkey'],\r\n\t\t\t\t['TM', 'Turkmenistan'],\r\n\t\t\t\t['TC', 'Turks and Caicos Islands'],\r\n\t\t\t\t['TV', 'Tuvalu'],\r\n\t\t\t\t['UG', 'Uganda'],\r\n\t\t\t\t['UA', 'Ukraine'],\r\n\t\t\t\t['AE', 'United Arab Emirates'],\r\n\t\t\t\t['GB', 'United Kingdom of Great Britain and Northern Ireland'],\r\n\t\t\t\t['US', 'United States of America'],\r\n\t\t\t\t['UM', 'United States Minor Outlying Islands'],\r\n\t\t\t\t['UY', 'Uruguay'],\r\n\t\t\t\t['UZ', 'Uzbekistan'],\r\n\t\t\t\t['VU', 'Vanuatu'],\r\n\t\t\t\t['VE', 'Venezuela (Bolivarian Republic of)'],\r\n\t\t\t\t['VN', 'Viet Nam'],\r\n\t\t\t\t['VG', 'Virgin Islands (British)'],\r\n\t\t\t\t['VI', 'Virgin Islands (U.S.)'],\r\n\t\t\t\t['WF', 'Wallis and Futuna'],\r\n\t\t\t\t['EH', 'Western Sahara'],\r\n\t\t\t\t['YE', 'Yemen'],\r\n\t\t\t\t['ZM', 'Zambia'],\r\n\t\t\t\t['ZW', 'Zimbabwe']\r\n\t\t\t];\r\n\t\t\tfor (var i=0,c; c=countries[i]; i++) {\r\n\t\t\t\tthis.items.push(new Country(c[1], c[0]));\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tget: function Countries_get() {\r\n\t\t\treturn this.items;\r\n\t\t},\r\n\t\t\r\n\t\tby: function Countries_by(prop, value, caseSensitive) {\r\n\t\t\tvar results = [], i=0;\r\n\t\t\tif (! this.items.length) {return results};\r\n\t\t\tif ((typeof value === 'string') && (!caseSensitive)) {value = value.toLowerCase();}\r\n\t\t\twhile(i < this.items.length) {\r\n\t\t\t\tvar mine = this.items[i][prop];\r\n\t\t\t\tif (typeof mine === 'string') {\r\n\t\t\t\t\tif (!caseSensitive) {\r\n\t\t\t\t\t\tmine = mine.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (mine.indexOf(value) === 0) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (mine === value) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ti++; // skip until we found first item\r\n\t\t\t}\r\n\t\t\twhile (i < this.items.length) {\r\n\t\t\t\t// add items until we no longer match\r\n\t\t\t\tvar mine = this.items[i][prop];\r\n\t\t\t\tif (typeof mine === 'string') {\r\n\t\t\t\t\tif (!caseSensitive) {mine = mine.toLowerCase();}\r\n\t\t\t\t\tif (mine.indexOf(value) === 0) {\r\n\t\t\t\t\t\tresults.push(this.items[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {break;}\r\n\t\t\t\t} else if (mine === value) {\r\n\t\t\t\t\tresults.push(this.items[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {break;}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t},\r\n\t\t\r\n\t\tbyCode: function(code) {\r\n\t\t\treturn this.by('code', code);\r\n\t\t},\r\n\t\t\r\n\t\tbyName: function(name) {\r\n\t\t\treturn this.by('name', name);\r\n\t\t}\r\n\t});\r\n\r\n\treturn new Countries();\r\n});\n","define('bridalapp/credential',['bridalapp/class', 'bridalapp/persistent'], function(Class, Persistent){\r\n\tvar Credential = Class('Credential', Persistent, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn Credential;\r\n});\n","define('bridalapp/group',['bridalapp/class', 'bridalapp/named'], function(Class, Named){\r\n\tvar Group = Class('Group', Named, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\r\n\treturn Group;\r\n});\n","define('bridalapp/password-credential',['bridalapp/class', 'bridalapp/credential'], function(Class, Credential){\r\n\tvar PasswordCredential = Class('PasswordCredential', Credential, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn PasswordCredential;\r\n});\n","define('bridalapp/product',['bridalapp/class', 'bridalapp/named'], function(Class, Named){\r\n\tvar Product = Class('Product', Named, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn Product;\r\n});\n","define('bridalapp/products',['bridalapp/class', \r\n\t\t'bridalapp/syncheddatastore', \r\n\t\t'bridalapp/localdatastore', \r\n\t\t'bridalapp/restdatastore',\r\n], \r\nfunction (Class, SynchedDataStore) {\r\n\tvar Products = Class('Products', SynchedDataStore, {\r\n\t\tinitialize: function Products_initialize($super) {\r\n\t\t\t$super('products', 'synched://local/bridal-app/products#http/api/products');\r\n\t\t\tthis.cfg.remoteDataStore.cfg.supportsSynch = true;\r\n\t\t}\r\n\t});\r\n\r\n\treturn new Products();\r\n});\r\n\n","define('bridalapp/rating',['bridalapp/class', 'bridalapp/persistent'], function(Class, Persistent){\r\n\tvar Rating = Class('Rating', Persistent, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t},\r\n\t\r\n\t\ttoStringProperties: function($super) {\r\n\t\t\treturn $super() + ' ' + this.score + ' ' + this.productId\r\n\t\t}\r\n\t});\r\n\r\n\treturn Rating;\r\n});\n","define('bridalapp/ratings',['bridalapp/class', \r\n\t\t'bridalapp/syncheddatastore',\r\n\t\t'bridalapp/localdatastore',\r\n\t\t'bridalapp/restdatastore',\r\n], \r\nfunction (Class, SynchedDataStore) {\r\n\tvar Ratings = Class('Ratings', SynchedDataStore, {\r\n\t\tinitialize: function Ratings_initialize($super) {\r\n\t\t\t$super('ratings', 'synched://local/bridal-app/ratings#http/api/ratings');\r\n\t\t\tthis.cfg.remoteDataStore.cfg.supportsSynch = true;\r\n\t\t}\r\n\t});\r\n\r\n\treturn new Ratings();\r\n});\r\n\n","define('bridalapp/role',['bridalapp/class', 'bridalapp/named', 'suid'], function(Class, Named, Suid){\r\n\tvar Role = Class('Role', Named, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\t\r\n\tRole.GUEST = new Role({id:Suid(1), name:'Guest'});\r\n\tRole.USER = new Role({id:Suid(2), name:'User'});\r\n\tRole.STORE_USER = new Role({id:Suid(3), name:'Store-User'});\r\n\tRole.STORE_MANAGER = new Role({id:Suid(4), name:'Store-Manager'});\r\n\tRole.BRAND_USER = new Role({id:Suid(5), name:'Brand-User'});\r\n\tRole.BRAND_MANAGER = new Role({id:Suid(6), name:'Brand-Manager'});\r\n\tRole.BRAUTSCHLOSS_USER = new Role({id:Suid(7), name:'Brautschloss-User'});\r\n\tRole.BRAUTSCHLOSS_MANAGER = new Role({id:Suid(8), name:'Brautschloss-Manager'});\r\n\tRole.ADMINISTRATOR = new Role({id:Suid(9), name:'Administrator'});\r\n\t\r\n\treturn Role;\r\n});\n","define('bridalapp/stockitem',['bridalapp/class', 'bridalapp/persistent'], function(Class, Persistent){\r\n\tvar StockItem = Class('StockItem', Persistent, {\r\n\t\tinitialize: function StockItem_initialize($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn StockItem;\r\n});\n","define('bridalapp/stock',['bridalapp/class', \r\n\t\t'bridalapp/syncheddatastore', \r\n\t\t'bridalapp/localdatastore', \r\n\t\t'bridalapp/restdatastore',\r\n], \r\nfunction (Class, SynchedDataStore) {\r\n\tvar Stock = Class('Stock', SynchedDataStore, {\r\n\t\tinitialize: function Stock_initialize($super) {\r\n\t\t\t$super('stock', 'synched://local/bridal-app/stock#http/api/stock');\r\n\t\t\tthis.cfg.remoteDataStore.cfg.supportsSynch = true;\r\n\t\t}\r\n\t});\r\n\r\n\treturn new Stock();\r\n});\r\n\n","define('bridalapp/store',['bridalapp/class', 'bridalapp/named'], function(Class, Named){\r\n\tvar Store = Class('Store', Named, {\r\n\t\tinitialize: function($super, obj) {\r\n\t\t\t$super(obj);\r\n\t\t},\r\n\t\t\r\n\t\tgetFullAddress: function() {\r\n\t\t\treturn this.address1 + (this.address2 ? ', ' + this.address2 : '') + ', ' \r\n\t\t\t\t+ this.postalCode + ' ' + this.city + (this.state ? ', ' + this.state : '') + ', '\r\n\t\t\t\t+ Countries.byCode(this.countryCode)[0].name;\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn Store;\r\n});\n","define('bridalapp/stores',['bridalapp/class', \r\n\t\t'bridalapp/syncheddatastore', \r\n\t\t'bridalapp/localdatastore', \r\n\t\t'bridalapp/restdatastore',\r\n], \r\nfunction (Class, SynchedDataStore) {\r\n\tvar Stores = Class('Stores', SynchedDataStore, {\r\n\t\tinitialize: function Stores_initialize($super) {\r\n\t\t\t$super('stores', 'synched://local/bridal-app/stores#http/api/stores');\r\n\t\t\tthis.cfg.remoteDataStore.cfg.supportsSynch = true;\r\n\t\t}\r\n\t});\r\n\r\n\treturn new Stores();\r\n});\r\n\n","/*! \r\n[bridalapp-client 0.9.12](http://github.com/download/bridalapp-client). Copyright 2015 by [Stijn de Witt](http://StijnDeWitt.com). Some rights reserved. License: [CC-BY-4.0](https://creativecommons.org/licenses/by/4.0/) */\r\ndefine('bridalapp',[\r\n\t\t'bridalapp/localdatastore',\r\n\t\t'bridalapp/restdatastore',\r\n\t\t// Pull in all classes\r\n\t\t'bridalapp/account', \r\n\t\t'bridalapp/brand',\r\n\t\t'bridalapp/brands',\r\n\t\t'bridalapp/category',\r\n\t\t'bridalapp/country',\r\n\t\t'bridalapp/countries',\r\n\t\t'bridalapp/credential',\r\n\t\t'bridalapp/group',\r\n\t\t'bridalapp/log', \r\n\t\t'bridalapp/named',\r\n\t\t'bridalapp/password-credential', \r\n\t\t'bridalapp/persistent',\r\n\t\t'bridalapp/product',\r\n\t\t'bridalapp/products',\r\n\t\t'bridalapp/rating',\r\n\t\t'bridalapp/ratings',\r\n\t\t'bridalapp/role',\r\n\t\t'bridalapp/stockitem',\r\n\t\t'bridalapp/stock',\r\n\t\t'bridalapp/store',\r\n\t\t'bridalapp/stores'\r\n\t], \r\n\r\nfunction(\r\n\tLocalDataStore,\r\n\tRestDataStore,\r\n\tAccount, \r\n\tBrand,\r\n\tBrands,\r\n\tCategory,\r\n\tCountry,\r\n\tCountries,\r\n\tCredential,\r\n\tGroup,\r\n\tlog,\r\n\tNamed,\r\n\tPasswordCredential, \r\n\tPersistent,\r\n\tProduct,\r\n\tProducts,\r\n\tRating,\r\n\tRatings,\r\n\tRole,\r\n\tStockItem,\r\n\tStock,\r\n\tStore,\r\n\tStores\r\n){\r\n\t// Create a namespace with all classes in it and return it\r\n\treturn {\r\n\t\tSTATIC: 'https://cdn.rawgit.com/download/bridalapp-static/0.9.7',\r\n//\t\tAPIKEY: 'AIzaSyDRiYJW2n0wN1-H06fYmAza3EvsaDTLoEg', // DEVELOPMENT\r\n\t\tAPIKEY: 'AIzaSyB75slLBHVw8DPQRRyYq6ZDjNuml3ZB_a4', // PRODUCTION\r\n\r\n\t\tAccount: Account, \r\n\t\tBrand: Brand,\r\n\t\tBrands: Brands,\r\n\t\tCategory: Category,\r\n\t\tCountry: Country,\r\n\t\tCountries: Countries,\r\n\t\tCredential: Credential,\r\n\t\tGroup: Group,\r\n\t\tlog: log,\r\n\t\tNamed: Named,\r\n\t\tPasswordCredential: PasswordCredential, \r\n\t\tPersistent: Persistent,\r\n\t\tProduct: Product,\r\n\t\tProducts: Products,\r\n\t\tRating: Rating,\r\n\t\tRatings: Ratings,\r\n\t\tRole: Role,\r\n\t\tStockItem: StockItem,\r\n\t\tStock: Stock,\r\n\t\tStore: Store,\r\n\t\tStores: Stores,\r\n\r\n\t\tglobalize: function(global){\r\n\t\t\tfor (var key in this) {\r\n\t\t\t\tif (this.hasOwnProperty(key) && (key !== 'globalize')) {\r\n\t\t\t\t\tglobal[key] = this[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n);\n"]}